conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_scheduleIteration();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 3
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::RecordStore::insertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::doInsertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::_insertRecords(mongo::OperationContext*, mongo::Record*, mongo::Timestamp const*, unsigned long);mongo::wiredTigerCursorInsert(mongo::OperationContext*, __wt_cursor*);__curfile_insert;__wt_btcur_insert;pthread_mutex_lock;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 4
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_scheduleIteration();mongo::OperationContext::~OperationContext();mongo::OperationContext::~OperationContext();mongo::detail::CancellationStateHolder::~CancellationStateHolder();mongo::detail::CancellationState::~CancellationState();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 4
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::WriteUnitOfWork::commit();mongo::RecoveryUnit::commitUnitOfWork();mongo::WiredTigerRecoveryUnit::_commit();mongo::WiredTigerRecoveryUnit::_txnClose(bool);__session_commit_transaction;__wt_txn_commit;__wt_txn_release;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 4
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::IndexCatalogImpl::indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexFilteredRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::SortedDataIndexAccessMethod::insert(mongo::OperationContext*, mongo::SharedBufferFragmentBuilder&, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::_indexKeysOrWriteToSideTable(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::BSONObj const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::insertKeysAndUpdateMultikeyPaths(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::SortedDataIndexAccessMethod::insertKeys(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::WiredTigerIndex::insert(mongo::OperationContext*, mongo::KeyString::Value const&, bool, mongo::IncludeDuplicateRecordId);mongo::WiredTigerCursor::WiredTigerCursor(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, bool, mongo::OperationContext*);mongo::WiredTigerSession::getNewCursor(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*);mongo::(anonymous namespace)::_openCursor(__wt_session*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*, __wt_cursor**) [clone .constprop.0];__session_open_cursor;config_check;__wt_config_next;__config_next;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 4
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_scheduleIteration();mongo::ServiceContext::OperationContextDeleter::operator()(mongo::OperationContext*) const;__GI___lll_lock_wait;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 4
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);auto mongo::future_util::AsyncState<mongo::(anonymous namespace)::ExecCommandDatabase>::make<std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext> >(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>&&);std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 4
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);void mongo::(anonymous namespace)::populateReply<mongo::write_ops::InsertCommandReply>(mongo::OperationContext*, bool, unsigned long, mongo::write_ops_exec::WriteResult, mongo::write_ops::InsertCommandReply*, boost::optional<mongo::(anonymous namespace)::PopulateReplyHooks>);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 4
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_setup();mongo::extractWriteConcern(mongo::OperationContext*, mongo::BSONObj const&, bool);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 4
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::IndexCatalogImpl::indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexFilteredRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::SortedDataIndexAccessMethod::insert(mongo::OperationContext*, mongo::SharedBufferFragmentBuilder&, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::_indexKeysOrWriteToSideTable(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::BSONObj const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::insertKeysAndUpdateMultikeyPaths(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::SortedDataIndexAccessMethod::insertKeys(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::WiredTigerIndex::insert(mongo::OperationContext*, mongo::KeyString::Value const&, bool, mongo::IncludeDuplicateRecordId);mongo::WiredTigerCursor::WiredTigerCursor(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, bool, mongo::OperationContext*);mongo::WiredTigerSession::getNewCursor(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*);mongo::(anonymous namespace)::_openCursor(__wt_session*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*, __wt_cursor**) [clone .constprop.0];__session_open_cursor;__strncmp_evex;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 4
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::collection_internal::cappedDeleteUntilBelowConfiguredMaximum(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::RecordId const&);mongo::CollectionImpl::isCappedAndNeedsDelete(mongo::OperationContext*) const;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 4
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_scheduleIteration();mongo::OperationContext::~OperationContext();mongo::OperationContext::~OperationContext();mongo::WiredTigerRecoveryUnit::~WiredTigerRecoveryUnit();mongo::WiredTigerRecoveryUnit::~WiredTigerRecoveryUnit();__pthread_mutex_unlock;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 4
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::IndexCatalogImpl::indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexFilteredRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::SortedDataIndexAccessMethod::insert(mongo::OperationContext*, mongo::SharedBufferFragmentBuilder&, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::_indexKeysOrWriteToSideTable(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::BSONObj const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::insertKeysAndUpdateMultikeyPaths(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::SortedDataIndexAccessMethod::insertKeys(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::WiredTigerIndex::insert(mongo::OperationContext*, mongo::KeyString::Value const&, bool, mongo::IncludeDuplicateRecordId);mongo::WiredTigerIdIndex::_insert(mongo::OperationContext*, __wt_cursor*, mongo::KeyString::Value const&, bool, mongo::IncludeDuplicateRecordId);mongo::wiredTigerCursorInsert(mongo::OperationContext*, __wt_cursor*);__curfile_insert;__wt_btcur_insert;__wt_row_modify;__wt_txn_modify;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 4
Checkpointer;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::BackgroundJob::jobBody();mongo::Checkpointer::run();mongo::WiredTigerKVEngine::checkpoint(mongo::OperationContext*);mongo::WiredTigerKVEngine::_checkpoint(mongo::OperationContext*, __wt_session*);mongo::WiredTigerKVEngine::_checkpoint(__wt_session*, bool);__session_checkpoint.cold;__wt_txn_checkpoint;__txn_checkpoint_wrapper;__checkpoint_tree;__wt_sync_file;__wt_reconcile;__wt_rec_row_leaf;__rec_row_leaf_insert;__wt_rec_split;__rec_split_write.constprop.0;__rec_write;__wt_blkcache_write;__wt_block_write;__block_write_off;pwrite64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_pwrite64;vfs_write;ext4_file_write_iter;ext4_buffered_write_iter;generic_perform_write;ext4_da_write_end;generic_write_end;__mark_inode_dirty;ext4_dirty_inode;__ext4_mark_inode_dirty;ext4_reserve_inode_write;__ext4_journal_get_write_access;jbd2_journal_get_write_access;do_get_write_access;out_of_line_wait_on_bit;__wait_on_bit;bit_wait_io;io_schedule;schedule;finish_task_switch.isra.0 4
JournalFlusher;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::BackgroundJob::jobBody();mongo::JournalFlusher::run();mongo::WiredTigerRecoveryUnit::waitUntilDurable(mongo::OperationContext*);mongo::WiredTigerSessionCache::waitUntilDurable(mongo::OperationContext*, mongo::WiredTigerSessionCache::Fsync, mongo::WiredTigerSessionCache::UseJournalListener);__session_log_flush;__wt_log_flush;__wt_log_force_sync;__log_fsync_file;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;file_write_and_wait_range;__filemap_fdatawrite_range;filemap_fdatawrite_wbc;do_writepages;ext4_writepages;ext4_do_writepages;mpage_map_and_submit_extent;mpage_map_and_submit_buffers;mpage_submit_folio;ext4_bio_write_folio;submit_bio;submit_bio_noacct;__cond_resched;finish_task_switch.isra.0 5
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 5
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::IndexCatalogImpl::indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexFilteredRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::SortedDataIndexAccessMethod::insert(mongo::OperationContext*, mongo::SharedBufferFragmentBuilder&, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::_indexKeysOrWriteToSideTable(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::BSONObj const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::insertKeysAndUpdateMultikeyPaths(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::SortedDataIndexAccessMethod::insertKeys(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::WiredTigerIndex::insert(mongo::OperationContext*, mongo::KeyString::Value const&, bool, mongo::IncludeDuplicateRecordId);mongo::WiredTigerIdIndex::_insert(mongo::OperationContext*, __wt_cursor*, mongo::KeyString::Value const&, bool, mongo::IncludeDuplicateRecordId);mongo::wiredTigerCursorInsert(mongo::OperationContext*, __wt_cursor*);__curfile_insert;__wt_btcur_insert;__wt_row_modify;__wt_txn_log_op;__wt_logop_row_put_pack;__wt_struct_pack;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 5
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::Client::makeOperationContext();mongo::ServiceContext::makeOperationContext(mongo::Client*);__GI___lll_lock_wait;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 5
Service.Fixed-0;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::ThreadPool::Impl::_startWorkerThread_inlock()::{lambda()#4}, , 0>(mongo::ThreadPool::Impl::_startWorkerThread_inlock()::{lambda()#4})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::ThreadPool::Impl::_startWorkerThread_inlock()::{lambda()#4}, , 0>(mongo::ThreadPool::Impl::_startWorkerThread_inlock()::{lambda()#4})::{lambda()#1}> > >::_M_run();mongo::ThreadPool::Impl::_workerThreadBody(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&);mongo::ThreadPool::Impl::_consumeTasks();mongo::ThreadPool::Impl::_doOneTask(std::unique_lock<std::mutex>*);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorFixed::start()::{lambda(mongo::Status)#2}>(mongo::transport::ServiceExecutorFixed::start()::{lambda(mongo::Status)#2}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::AsioReactor::run();asio::io_context::run();asio::detail::scheduler::run(std::error_code&);asio::detail::scheduler::do_run_one(asio::detail::conditionally_enabled_mutex::scoped_lock&, asio::detail::scheduler_thread_info&, std::error_code const&);epoll_wait;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;syscall_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 5
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::transport::SessionWorkflow::Impl::_getNextWork();mongo::transport::SessionWorkflow::Impl::_receiveRequest();mongo::transport::CommonAsioSession::sourceMessage();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 6
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_setup();mongo::extractWriteConcern(mongo::OperationContext*, mongo::BSONObj const&, bool);mongo::WriteConcernOptions::extractWCFromCommand(mongo::BSONObj const&);mongo::WriteConcernOptions::parse(mongo::BSONObj const&);mongo::WriteConcernIdl::parse(mongo::IDLParserContext const&, mongo::BSONObj const&);mongo::WriteConcernIdl::parseProtected(mongo::IDLParserContext const&, mongo::BSONObj const&);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 6
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#3}::operator()() const;mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections);mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections, bool);mongo::AutoGetDb::createForAutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections const&);mongo::AutoGetDb::AutoGetDb(mongo::OperationContext*, mongo::DatabaseName const&, mongo::LockMode, mongo::Date_t, mongo::Lock::GlobalLockSkipOptions);mongo::Lock::DBLock::DBLock(mongo::OperationContext*, mongo::DatabaseName const&, mongo::LockMode, mongo::Date_t, mongo::Lock::GlobalLockSkipOptions);mongo::Lock::GlobalLock::GlobalLock(mongo::OperationContext*, mongo::LockMode, mongo::Date_t, mongo::Lock::InterruptBehavior, mongo::Lock::GlobalLockSkipOptions);mongo::Lock::GlobalLock::_takeGlobalAndRSTLLocks(mongo::LockMode, mongo::Date_t);mongo::LockerImpl::lockGlobal(mongo::OperationContext*, mongo::LockMode, mongo::Date_t);mongo::LockerImpl::_acquireTicket(mongo::OperationContext*, mongo::LockMode, mongo::Date_t);mongo::TicketHolder::tryAcquire(mongo::AdmissionContext*);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 6
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::transport::SessionWorkflow::Impl::_getNextWork();mongo::transport::SessionWorkflow::Impl::_receiveRequest();mongo::transport::CommonAsioSession::sourceMessage();mongo::future_details::FutureImpl<mongo::Message>::ResetOnMoveOptional::_stealBase();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 6
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 6
Checkpointer;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::BackgroundJob::jobBody();mongo::Checkpointer::run();mongo::WiredTigerKVEngine::checkpoint(mongo::OperationContext*);mongo::WiredTigerKVEngine::_checkpoint(mongo::OperationContext*, __wt_session*);mongo::WiredTigerKVEngine::_checkpoint(__wt_session*, bool);__session_checkpoint.cold;__wt_txn_checkpoint;__txn_checkpoint_wrapper;__checkpoint_tree;__wt_sync_file;__wt_reconcile;__wt_rec_row_leaf;__rec_row_leaf_insert;__wt_rec_upd_select;-;asm_exc_page_fault;exc_page_fault;do_user_addr_fault;lock_mm_and_find_vma;down_read_killable;rwsem_down_read_slowpath;schedule_preempt_disabled;schedule;finish_task_switch.isra.0 6
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::RecordStore::insertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::doInsertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::_insertRecords(mongo::OperationContext*, mongo::Record*, mongo::Timestamp const*, unsigned long);mongo::WiredTigerCursor::WiredTigerCursor(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, bool, mongo::OperationContext*);mongo::WiredTigerSession::getNewCursor(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*);mongo::(anonymous namespace)::_openCursor(__wt_session*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*, __wt_cursor**) [clone .constprop.0];__session_open_cursor;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 6
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::IndexCatalogImpl::indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexFilteredRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::SortedDataIndexAccessMethod::insert(mongo::OperationContext*, mongo::SharedBufferFragmentBuilder&, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::_indexKeysOrWriteToSideTable(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::BSONObj const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::insertKeysAndUpdateMultikeyPaths(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::SortedDataIndexAccessMethod::insertKeys(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::WiredTigerIndex::insert(mongo::OperationContext*, mongo::KeyString::Value const&, bool, mongo::IncludeDuplicateRecordId);mongo::WiredTigerIdIndex::_insert(mongo::OperationContext*, __wt_cursor*, mongo::KeyString::Value const&, bool, mongo::IncludeDuplicateRecordId);mongo::wiredTigerCursorInsert(mongo::OperationContext*, __wt_cursor*);__curfile_insert;__wt_btcur_insert;__wt_row_modify;__wt_txn_log_op;__wt_logop_row_put_pack;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 6
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long));tcmalloc::CentralFreeList::RemoveRange(void**, void**, int);tcmalloc::CentralFreeList::Populate();-;asm_exc_page_fault;exc_page_fault;do_user_addr_fault;handle_mm_fault;__handle_mm_fault;handle_pte_fault;do_anonymous_page;vma_alloc_folio;__folio_alloc;__alloc_pages;__cond_resched;finish_task_switch.isra.0 6
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_add_ref_copy();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 6
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::NamespaceString::makeTimeseriesBucketsNamespace() const;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 6
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<mongo::DbResponse>::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#2}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#2}&&) &&::{lambda(mongo::DbResponse&&)#1}::operator()(mongo::DbResponse&&) const [clone .isra.0];auto mongo::future_details::statusCall<mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#2}&, mongo::DbResponse>(mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#2}&, mongo::DbResponse&&);mongo::transport::SessionWorkflow::Impl::_acceptResponse(mongo::DbResponse);mongo::ServiceContext::killAndDelistOperation(mongo::OperationContext*, mongo::ErrorCodes::Error);__GI___lll_lock_wait;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 6
Service.Fixed-0;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::ThreadPool::Impl::_startWorkerThread_inlock()::{lambda()#4}, , 0>(mongo::ThreadPool::Impl::_startWorkerThread_inlock()::{lambda()#4})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::ThreadPool::Impl::_startWorkerThread_inlock()::{lambda()#4}, , 0>(mongo::ThreadPool::Impl::_startWorkerThread_inlock()::{lambda()#4})::{lambda()#1}> > >::_M_run();mongo::ThreadPool::Impl::_workerThreadBody(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&);mongo::ThreadPool::Impl::_consumeTasks();mongo::ThreadPool::Impl::_doOneTask(std::unique_lock<std::mutex>*);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorFixed::start()::{lambda(mongo::Status)#2}>(mongo::transport::ServiceExecutorFixed::start()::{lambda(mongo::Status)#2}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::AsioReactor::run();asio::io_context::run();asio::detail::scheduler::run(std::error_code&);pthread_mutex_lock;-;asm_common_interrupt;common_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 6
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::RecordStore::insertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::doInsertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::_insertRecords(mongo::OperationContext*, mongo::Record*, mongo::Timestamp const*, unsigned long);mongo::wiredTigerCursorInsert(mongo::OperationContext*, __wt_cursor*);__curfile_insert;__wt_btcur_insert;__wt_row_modify;__wt_calloc;calloc;tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long));tcmalloc::CentralFreeList::RemoveRange(void**, void**, int);tcmalloc::CentralFreeList::Populate();-;asm_exc_page_fault;exc_page_fault;do_user_addr_fault;handle_mm_fault;__handle_mm_fault;handle_pte_fault;do_anonymous_page;vma_alloc_folio;__folio_alloc;__alloc_pages;__cond_resched;finish_task_switch.isra.0 6
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 7
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::WriteUnitOfWork::commit();mongo::RecoveryUnit::commitUnitOfWork();mongo::WiredTigerRecoveryUnit::_commit();mongo::WiredTigerRecoveryUnit::_txnClose(bool);__session_commit_transaction;__wt_txn_commit;__wt_log_write;__wt_log_release;__log_fs_write;pwrite64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_pwrite64;vfs_write;ext4_file_write_iter;ext4_buffered_write_iter;file_modified;file_modified_flags;generic_update_time;__mark_inode_dirty;ext4_dirty_inode;__ext4_mark_inode_dirty;__cond_resched;finish_task_switch.isra.0 7
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 7
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::WriteUnitOfWork::commit();mongo::RecoveryUnit::commitUnitOfWork();mongo::WiredTigerRecoveryUnit::_commit();mongo::WiredTigerRecoveryUnit::_txnClose(bool);__session_commit_transaction;__wt_txn_commit;free;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 7
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_initiateCommand();mongo::CurOp::startTime();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 7
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::RecordStore::insertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::doInsertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::_insertRecords(mongo::OperationContext*, mongo::Record*, mongo::Timestamp const*, unsigned long);mongo::WiredTigerCursor::WiredTigerCursor(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, bool, mongo::OperationContext*);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 7
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_setup();mongo::extractWriteConcern(mongo::OperationContext*, mongo::BSONObj const&, bool);mongo::WriteConcernOptions::extractWCFromCommand(mongo::BSONObj const&);mongo::WriteConcernOptions::parse(mongo::BSONObj const&);mongo::WriteConcernIdl::parse(mongo::IDLParserContext const&, mongo::BSONObj const&);__strlen_evex;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 7
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_scheduleIteration();mongo::OperationContext::~OperationContext();mongo::OperationContext::~OperationContext();mongo::WiredTigerRecoveryUnit::~WiredTigerRecoveryUnit();mongo::WiredTigerRecoveryUnit::~WiredTigerRecoveryUnit();mongo::WiredTigerSessionCache::releaseSession(mongo::WiredTigerSession*);mongo::WiredTigerSession::closeAllCursors(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&);__curfile_close;__wt_cursor_cache_release;__wt_cursor_cache;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 7
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::RecordStore::insertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::doInsertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::_insertRecords(mongo::OperationContext*, mongo::Record*, mongo::Timestamp const*, unsigned long);mongo::WiredTigerCursor::WiredTigerCursor(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, bool, mongo::OperationContext*);mongo::WiredTigerRecoveryUnit::getSession();mongo::WiredTigerRecoveryUnit::_txnOpen();mongo::WiredTigerBeginTxnBlock::WiredTigerBeginTxnBlock(__wt_session*, mongo::PrepareConflictBehavior, mongo::WiredTigerBeginTxnBlock::RoundUpPreparedTimestamps, mongo::WiredTigerBeginTxnBlock::RoundUpReadTimestamp, mongo::RecoveryUnit::UntimestampedWriteAssertionLevel);__session_begin_transaction;__txn_get_snapshot_int;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 7
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#3}::operator()() const;mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections);mongo::(anonymous namespace)::CollectionShardingStateStandalone::appendShardVersion(mongo::BSONObjBuilder*) const;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 7
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource)::{lambda()#1}::operator()() const;__GI___lll_lock_wait;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 7
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandImpl::_epilogue();mongo::CommandHelpers::extractOrAppendOk(mongo::BSONObjBuilder&);mongo::BSONObjBuilderBase<mongo::BSONObjBuilder, mongo::BufBuilder>::_done() [clone .part.0];-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 7
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::OpObserverRegistry::onInserts(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, std::vector<bool, std::allocator<bool> >, bool);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 7
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::fixDocumentForInsert(mongo::OperationContext*, mongo::BSONObj const&, bool, bool*);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 7
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 7
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::IndexCatalogImpl::indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexFilteredRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 7
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::RecordStore::insertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::doInsertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::_insertRecords(mongo::OperationContext*, mongo::Record*, mongo::Timestamp const*, unsigned long);mongo::WiredTigerCursor::WiredTigerCursor(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, bool, mongo::OperationContext*);mongo::WiredTigerRecoveryUnit::getSession();mongo::WiredTigerRecoveryUnit::_txnOpen();mongo::WiredTigerBeginTxnBlock::WiredTigerBeginTxnBlock(__wt_session*, mongo::PrepareConflictBehavior, mongo::WiredTigerBeginTxnBlock::RoundUpPreparedTimestamps, mongo::WiredTigerBeginTxnBlock::RoundUpReadTimestamp, mongo::RecoveryUnit::UntimestampedWriteAssertionLevel);__session_begin_transaction;__wt_txn_config;__wt_config_gets_def;__strlen_evex;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 7
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);operator delete(void*, unsigned long);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 7
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 7
Service.Fixed-0;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::ThreadPool::Impl::_startWorkerThread_inlock()::{lambda()#4}, , 0>(mongo::ThreadPool::Impl::_startWorkerThread_inlock()::{lambda()#4})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::ThreadPool::Impl::_startWorkerThread_inlock()::{lambda()#4}, , 0>(mongo::ThreadPool::Impl::_startWorkerThread_inlock()::{lambda()#4})::{lambda()#1}> > >::_M_run();mongo::ThreadPool::Impl::_workerThreadBody(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&);mongo::ThreadPool::Impl::_consumeTasks();mongo::ThreadPool::Impl::_doOneTask(std::unique_lock<std::mutex>*);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorFixed::start()::{lambda(mongo::Status)#2}>(mongo::transport::ServiceExecutorFixed::start()::{lambda(mongo::Status)#2}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::AsioReactor::run();asio::io_context::run();asio::detail::scheduler::run(std::error_code&);pthread_mutex_lock;-;asm_common_interrupt;common_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 7
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_scheduleIteration();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 7
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::OpObserverRegistry::onInserts(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, std::vector<bool, std::allocator<bool> >, bool);mongo::OpObserverImpl::onInserts(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, std::vector<bool, std::allocator<bool> >, bool);mongo::repl::OplogEntryBase::~OplogEntryBase();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 7
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::DbResponse::~DbResponse();-;asm_sysvec_reschedule_ipi;sysvec_reschedule_ipi;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 7
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::RecordStore::insertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::doInsertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::_insertRecords(mongo::OperationContext*, mongo::Record*, mongo::Timestamp const*, unsigned long);mongo::WiredTigerCursor::WiredTigerCursor(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, bool, mongo::OperationContext*);mongo::WiredTigerSession::getNewCursor(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*);mongo::(anonymous namespace)::_openCursor(__wt_session*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*, __wt_cursor**) [clone .constprop.0];__session_open_cursor;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 7
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 7
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_scheduleIteration();mongo::OperationContext::~OperationContext();mongo::OperationContext::~OperationContext();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 8
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::IndexCatalogImpl::indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexFilteredRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::SortedDataIndexAccessMethod::insert(mongo::OperationContext*, mongo::SharedBufferFragmentBuilder&, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::_indexKeysOrWriteToSideTable(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::BSONObj const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::insertKeysAndUpdateMultikeyPaths(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::SortedDataIndexAccessMethod::insertKeys(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::WiredTigerIndex::insert(mongo::OperationContext*, mongo::KeyString::Value const&, bool, mongo::IncludeDuplicateRecordId);mongo::WiredTigerIdIndex::_insert(mongo::OperationContext*, __wt_cursor*, mongo::KeyString::Value const&, bool, mongo::IncludeDuplicateRecordId);mongo::wiredTigerCursorInsert(mongo::OperationContext*, __wt_cursor*);__curfile_insert;__wt_btcur_insert;__wt_row_search;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 8
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#3}::operator()() const;mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections);mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections, bool);mongo::AutoGetDb::createForAutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections const&);mongo::AutoGetDb::AutoGetDb(mongo::OperationContext*, mongo::DatabaseName const&, mongo::LockMode, mongo::Date_t, mongo::Lock::GlobalLockSkipOptions);mongo::Lock::DBLock::DBLock(mongo::OperationContext*, mongo::DatabaseName const&, mongo::LockMode, mongo::Date_t, mongo::Lock::GlobalLockSkipOptions);mongo::Lock::GlobalLock::GlobalLock(mongo::OperationContext*, mongo::LockMode, mongo::Date_t, mongo::Lock::InterruptBehavior, mongo::Lock::GlobalLockSkipOptions);mongo::Lock::GlobalLock::_takeGlobalAndRSTLLocks(mongo::LockMode, mongo::Date_t);mongo::LockerImpl::lockGlobal(mongo::OperationContext*, mongo::LockMode, mongo::Date_t);mongo::LockerImpl::_acquireTicket(mongo::OperationContext*, mongo::LockMode, mongo::Date_t);mongo::TicketHolder::waitForTicketUntil(mongo::OperationContext*, mongo::AdmissionContext*, mongo::Date_t);mongo::TicketHolder::tryAcquire(mongo::AdmissionContext*);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 8
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::RecordStore::insertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::doInsertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::_insertRecords(mongo::OperationContext*, mongo::Record*, mongo::Timestamp const*, unsigned long);mongo::wiredTigerCursorInsert(mongo::OperationContext*, __wt_cursor*);__curfile_insert;__wt_btcur_insert;__wt_row_modify;__wt_txn_log_op;__txn_logrec_init;__wt_struct_pack;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 8
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::OpObserverRegistry::onInserts(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, std::vector<bool, std::allocator<bool> >, bool);mongo::OpObserverImpl::onInserts(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, std::vector<bool, std::allocator<bool> >, bool);mongo::ShardingWriteRouter::ShardingWriteRouter(mongo::OperationContext*, mongo::NamespaceString const&, mongo::CatalogCache*);mongo::FeatureFlag::isEnabledAndIgnoreFCVUnsafeAtStartup() const;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 8
mongod;[unknown];__GI___lll_lock_wait;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 8
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::RecordStore::insertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::doInsertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::_insertRecords(mongo::OperationContext*, mongo::Record*, mongo::Timestamp const*, unsigned long);mongo::wiredTigerCursorInsert(mongo::OperationContext*, __wt_cursor*);__curfile_insert;__wt_btcur_insert;__wt_row_modify;__wt_txn_log_op;__wt_logop_row_put_pack;__pack_next.part.0;-;asm_sysvec_reschedule_ipi;sysvec_reschedule_ipi;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 9
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::rpc::makeReplyBuilder(mongo::rpc::Protocol);-;asm_sysvec_reschedule_ipi;sysvec_reschedule_ipi;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 9
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);auto mongo::future_util::AsyncState<mongo::(anonymous namespace)::ExecCommandDatabase>::make<std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext> >(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>&&);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::parse(mongo::OperationContext*, mongo::OpMsgRequest const&);mongo::write_ops::InsertCommandRequest::parse(mongo::IDLParserContext const&, mongo::OpMsgRequest const&);mongo::write_ops::InsertCommandRequest::parseProtected(mongo::IDLParserContext const&, mongo::OpMsgRequest const&);mongo::isGenericArgument(mongo::StringData);__memcmp_evex_movbe;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 9
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::RecordStore::insertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::doInsertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::_insertRecords(mongo::OperationContext*, mongo::Record*, mongo::Timestamp const*, unsigned long);mongo::WiredTigerCursor::WiredTigerCursor(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, bool, mongo::OperationContext*);mongo::WiredTigerRecoveryUnit::getSession();mongo::WiredTigerRecoveryUnit::_txnOpen();mongo::WiredTigerBeginTxnBlock::WiredTigerBeginTxnBlock(__wt_session*, mongo::PrepareConflictBehavior, mongo::WiredTigerBeginTxnBlock::RoundUpPreparedTimestamps, mongo::WiredTigerBeginTxnBlock::RoundUpReadTimestamp, mongo::RecoveryUnit::UntimestampedWriteAssertionLevel);__session_begin_transaction;__wt_txn_config;__txn_config_operation_timeout;__wt_config_gets_def;__strlen_evex;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 9
Checkpointer;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::BackgroundJob::jobBody();mongo::Checkpointer::run();mongo::WiredTigerKVEngine::checkpoint(mongo::OperationContext*);mongo::WiredTigerKVEngine::_checkpoint(mongo::OperationContext*, __wt_session*);mongo::WiredTigerKVEngine::_checkpoint(__wt_session*, bool);__session_checkpoint.cold;__wt_txn_checkpoint;__txn_checkpoint_wrapper;__checkpoint_tree;__wt_sync_file;__wt_reconcile;__wt_rec_row_leaf;__rec_row_leaf_insert;__wt_rec_upd_select;-;asm_exc_page_fault;exc_page_fault;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 9
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);auto mongo::future_details::statusCall<mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)::{lambda(mongo::DbResponse)#1}&, mongo::DbResponse>(mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)::{lambda(mongo::DbResponse)#1}&, mongo::DbResponse&&);mongo::(anonymous namespace)::HandleRequest::completeOperation(mongo::DbResponse&);mongo::CurOp::completeAndLogOperation(mongo::logv2::LogComponent, std::shared_ptr<mongo::ProfileFilter const>, boost::optional<unsigned long>, boost::optional<long long>, bool);clock_gettime;[unknown];-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 9
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::Client::makeOperationContext();mongo::ServiceContext::makeOperationContext(mongo::Client*);mongo::transport::TransportLayerManager::makeBaton(mongo::OperationContext*) const;mongo::transport::AsioTransportLayer::makeBaton(mongo::OperationContext*) const;std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 9
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_initiateCommand();mongo::CurOp::startTime();mongo::(anonymous namespace)::PosixTimer::start();mongo::(anonymous namespace)::PosixTimer::_getThreadTime() const [clone .constprop.0];clock_gettime;[unknown];-;entry_SYSCALL_64_after_hwframe;do_syscall_64;syscall_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 10
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::IndexCatalogImpl::indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexFilteredRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::SortedDataIndexAccessMethod::_indexKeysOrWriteToSideTable(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::BSONObj const&, mongo::InsertDeleteOptions const&, long*);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 10
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<mongo::DbResponse>::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#2}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#2}&&) &&::{lambda(mongo::DbResponse&&)#1}::operator()(mongo::DbResponse&&) const [clone .isra.0];auto mongo::future_details::statusCall<mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#2}&, mongo::DbResponse>(mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#2}&, mongo::DbResponse&&);mongo::transport::ServiceExecutor::yieldIfAppropriate() const;pthread_mutex_lock;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 10
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandInvocation::get(mongo::OperationContext*);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 10
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::onCompletion<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()::{lambda(mongo::Status)#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()::{lambda(mongo::Status)#1}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .constprop.0] [clone .isra.0];auto mongo::future_details::throwingCall<mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()::{lambda(mongo::Status)#1}&, mongo::StatusWith<mongo::future_details::FakeVoid> >(mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()::{lambda(mongo::Status)#1}&, mongo::StatusWith<mongo::future_details::FakeVoid>&&);mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_waitForWriteConcern(mongo::BSONObjBuilder&);mongo::ServiceEntryPointMongod::Hooks::waitForWriteConcern(mongo::OperationContext*, mongo::CommandInvocation const*, mongo::repl::OpTime const&, mongo::BSONObjBuilder&) const;mongo::ServiceEntryPointMongod::Hooks::waitForWriteConcern(mongo::OperationContext*, mongo::CommandInvocation const*, mongo::repl::OpTime const&, mongo::BSONObjBuilder&) const::{lambda()#1}::operator()() const;mongo::waitForWriteConcern(mongo::OperationContext*, mongo::repl::OpTime const&, mongo::WriteConcernOptions const&, mongo::WriteConcernResult*);__GI___lll_lock_wait;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 10
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 10
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 10
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#3}::operator()() const;mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections);mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections, bool);mongo::AutoGetDb::createForAutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections const&);mongo::AutoGetDb::AutoGetDb(mongo::OperationContext*, mongo::DatabaseName const&, mongo::LockMode, mongo::Date_t, mongo::Lock::GlobalLockSkipOptions);mongo::Lock::DBLock::DBLock(mongo::OperationContext*, mongo::DatabaseName const&, mongo::LockMode, mongo::Date_t, mongo::Lock::GlobalLockSkipOptions);mongo::Lock::GlobalLock::GlobalLock(mongo::OperationContext*, mongo::LockMode, mongo::Date_t, mongo::Lock::InterruptBehavior, mongo::Lock::GlobalLockSkipOptions);mongo::Lock::ResourceLock::_lock(mongo::LockMode, mongo::Date_t);mongo::LockerImpl::lock(mongo::OperationContext*, mongo::ResourceId, mongo::LockMode, mongo::Date_t);mongo::LockerImpl::_lockBegin(mongo::OperationContext*, mongo::ResourceId, mongo::LockMode);__GI___lll_lock_wait;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 10
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_initiateCommand();mongo::(anonymous namespace)::_extractReadConcern(mongo::OperationContext*, mongo::CommandInvocation const*, mongo::BSONObj const&, bool, bool);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 10
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::transport::SessionWorkflow::Impl::_getNextWork();mongo::transport::SessionWorkflow::Impl::_receiveRequest();mongo::transport::CommonAsioSession::sourceMessage();mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&);mongo::Future<void> mongo::transport::CommonAsioSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&);mongo::Future<void> mongo::transport::CommonAsioSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&);asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&);recvmsg;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 10
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::IndexCatalogImpl::indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexFilteredRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::SortedDataIndexAccessMethod::insert(mongo::OperationContext*, mongo::SharedBufferFragmentBuilder&, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::_indexKeysOrWriteToSideTable(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::BSONObj const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::insertKeysAndUpdateMultikeyPaths(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::SortedDataIndexAccessMethod::insertKeys(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::WiredTigerIndex::insert(mongo::OperationContext*, mongo::KeyString::Value const&, bool, mongo::IncludeDuplicateRecordId);mongo::WiredTigerCursor::WiredTigerCursor(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, bool, mongo::OperationContext*);mongo::WiredTigerSession::getNewCursor(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*);mongo::(anonymous namespace)::_openCursor(__wt_session*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*, __wt_cursor**) [clone .constprop.0];__session_open_cursor;__strcmp_evex;-;asm_sysvec_reschedule_ipi;sysvec_reschedule_ipi;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 10
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);auto mongo::future_util::AsyncState<mongo::(anonymous namespace)::ExecCommandDatabase>::make<std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext> >(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>&&);mongo::rpc::readRequestMetadata(mongo::OperationContext*, mongo::OpMsg const&, bool);mongo::VectorClock::gossipIn(mongo::OperationContext*, mongo::BSONObj const&, bool, unsigned int);mongo::VectorClock::_advanceTime(mongo::VectorClock::ComponentArray<mongo::LogicalTime>&&);mongo::VectorClock::_ensurePassesRateLimiter(mongo::ServiceContext*, mongo::VectorClock::ComponentArray<mongo::LogicalTime> const&);__memmove_avx512_unaligned_erms;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 10
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::transport::SessionWorkflow::Impl::_getNextWork();mongo::transport::SessionWorkflow::Impl::_receiveRequest();mongo::transport::CommonAsioSession::sourceMessage();mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)::{lambda()#1}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .constprop.0] [clone .isra.0];mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)::{lambda()#1}::operator()();mongo::Future<void> mongo::transport::CommonAsioSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&);mongo::Future<void> mongo::transport::CommonAsioSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&);asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&);recvmsg;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_recvmsg;__sys_recvmsg;___sys_recvmsg;____sys_recvmsg;sock_recvmsg;security_socket_recvmsg;apparmor_socket_recvmsg;aa_sk_perm;__cond_resched;finish_task_switch.isra.0 10
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#3}::operator()() const;mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections);mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections, bool);void std::vector<mongo::CollectionNamespaceOrUUIDLock, std::allocator<mongo::CollectionNamespaceOrUUIDLock> >::_M_realloc_insert<mongo::OperationContext*&, mongo::NamespaceStringOrUUID const&, mongo::LockMode&, mongo::Date_t&>(__gnu_cxx::__normal_iterator<mongo::CollectionNamespaceOrUUIDLock*, std::vector<mongo::CollectionNamespaceOrUUIDLock, std::allocator<mongo::CollectionNamespaceOrUUIDLock> > >, mongo::OperationContext*&, mongo::NamespaceStringOrUUID const&, mongo::LockMode&, mongo::Date_t&);mongo::CollectionNamespaceOrUUIDLock::CollectionNamespaceOrUUIDLock(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::Date_t)::{lambda()#1}::operator()() const;mongo::LockerImpl::lock(mongo::OperationContext*, mongo::ResourceId, mongo::LockMode, mongo::Date_t);mongo::LockerImpl::_lockBegin(mongo::OperationContext*, mongo::ResourceId, mongo::LockMode);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 11
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::Client::makeOperationContext();mongo::ServiceContext::makeOperationContext(mongo::Client*);void mongo::DecorationRegistry<mongo::OperationContext>::constructAt<mongo::StorageExecutionContext>(void*);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 11
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::IndexCatalogImpl::indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexFilteredRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::SortedDataIndexAccessMethod::insert(mongo::OperationContext*, mongo::SharedBufferFragmentBuilder&, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::_indexKeysOrWriteToSideTable(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::BSONObj const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::insertKeysAndUpdateMultikeyPaths(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::SortedDataIndexAccessMethod::insertKeys(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::WiredTigerIndex::insert(mongo::OperationContext*, mongo::KeyString::Value const&, bool, mongo::IncludeDuplicateRecordId);mongo::WiredTigerIdIndex::_insert(mongo::OperationContext*, __wt_cursor*, mongo::KeyString::Value const&, bool, mongo::IncludeDuplicateRecordId);mongo::wiredTigerCursorInsert(mongo::OperationContext*, __wt_cursor*);__curfile_insert;__wt_btcur_insert;__wt_row_modify;__wt_cache_page_inmem_incr;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 11
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);auto mongo::future_util::AsyncState<mongo::(anonymous namespace)::ExecCommandDatabase>::make<std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext> >(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>&&);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::parse(mongo::OperationContext*, mongo::OpMsgRequest const&);mongo::write_ops::InsertCommandRequest::parse(mongo::IDLParserContext const&, mongo::OpMsgRequest const&);mongo::write_ops::InsertCommandRequest::parseProtected(mongo::IDLParserContext const&, mongo::OpMsgRequest const&);mongo::BSONObjStlIterator::operator++() [clone .isra.0];mongo::BSONElement::computeSize(signed char, char const*, int, int);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 11
JournalFlusher;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::BackgroundJob::jobBody();mongo::JournalFlusher::run();mongo::WiredTigerRecoveryUnit::waitUntilDurable(mongo::OperationContext*);mongo::WiredTigerSessionCache::waitUntilDurable(mongo::OperationContext*, mongo::WiredTigerSessionCache::Fsync, mongo::WiredTigerSessionCache::UseJournalListener);__session_log_flush;__wt_log_flush;__wt_log_force_sync;__log_fsync_file;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;file_write_and_wait_range;__filemap_fdatawrite_range;filemap_fdatawrite_wbc;do_writepages;ext4_writepages;ext4_do_writepages;ext4_io_submit;submit_bio;submit_bio_noacct;__cond_resched;finish_task_switch.isra.0 11
Service.Fixed-0;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::ThreadPool::Impl::_startWorkerThread_inlock()::{lambda()#4}, , 0>(mongo::ThreadPool::Impl::_startWorkerThread_inlock()::{lambda()#4})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::ThreadPool::Impl::_startWorkerThread_inlock()::{lambda()#4}, , 0>(mongo::ThreadPool::Impl::_startWorkerThread_inlock()::{lambda()#4})::{lambda()#1}> > >::_M_run();mongo::ThreadPool::Impl::_workerThreadBody(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&);mongo::ThreadPool::Impl::_consumeTasks();mongo::ThreadPool::Impl::_doOneTask(std::unique_lock<std::mutex>*);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorFixed::start()::{lambda(mongo::Status)#2}>(mongo::transport::ServiceExecutorFixed::start()::{lambda(mongo::Status)#2}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::AsioReactor::run();asio::io_context::run();asio::detail::scheduler::run(std::error_code&);asio::detail::scheduler::do_run_one(asio::detail::conditionally_enabled_mutex::scoped_lock&, asio::detail::scheduler_thread_info&, std::error_code const&);epoll_wait;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_epoll_wait;do_epoll_wait;ep_poll;ep_send_events;mutex_lock;__cond_resched;finish_task_switch.isra.0 11
ftdc;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FTDCController::start()::{lambda()#2}, , 0>(mongo::FTDCController::start()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FTDCController::start()::{lambda()#2}, , 0>(mongo::FTDCController::start()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::FTDCController::doLoop();mongo::FTDCCollectorCollection::collect(mongo::Client*);mongo::FTDCServerStatusCommandCollector::collect(mongo::OperationContext*, mongo::BSONObjBuilder&);mongo::CommandHelpers::runCommandDirectly(mongo::OperationContext*, mongo::OpMsgRequest const&);mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdServerStatus::run(mongo::OperationContext*, mongo::DatabaseName const&, mongo::BSONObj const&, mongo::BSONObjBuilder&);mongo::ServerStatusSection::appendSection(mongo::OperationContext*, mongo::BSONElement const&, mongo::BSONObjBuilder*) const;__pthread_mutex_unlock;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 11
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::ClientStrand::_releaseCurrent();mongo::releaseThreadNameRef();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 11
JournalFlusher;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::BackgroundJob::jobBody();mongo::JournalFlusher::run();mongo::WiredTigerRecoveryUnit::waitUntilDurable(mongo::OperationContext*);mongo::WiredTigerSessionCache::waitUntilDurable(mongo::OperationContext*, mongo::WiredTigerSessionCache::Fsync, mongo::WiredTigerSessionCache::UseJournalListener);__session_log_flush;__wt_log_flush;__wt_log_force_sync;__log_fsync_file;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;file_write_and_wait_range;__filemap_fdatawait_range;__cond_resched;finish_task_switch.isra.0 11
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::(anonymous namespace)::initializeCommandHooks(mongo::ServiceContext*)::MongodCommandInvocationHooks::onBeforeRun(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 11
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}::operator()() const;mongo::NamespaceString::makeCommandNamespace(mongo::DatabaseName const&);mongo::NamespaceString::NamespaceString(mongo::DatabaseName, mongo::StringData);void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .isra.0];-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 11
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::AutoGetCollection::~AutoGetCollection();mongo::Lock::CollectionLock::~CollectionLock();mongo::LockerImpl::unlock(mongo::ResourceId);mongo::getGlobalServiceContext();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 11
ftdc;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FTDCController::start()::{lambda()#2}, , 0>(mongo::FTDCController::start()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FTDCController::start()::{lambda()#2}, , 0>(mongo::FTDCController::start()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::FTDCController::doLoop();mongo::FTDCCollectorCollection::collect(mongo::Client*);mongo::FTDCServerStatusCommandCollector::collect(mongo::OperationContext*, mongo::BSONObjBuilder&);mongo::CommandHelpers::runCommandDirectly(mongo::OperationContext*, mongo::OpMsgRequest const&);mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdServerStatus::run(mongo::OperationContext*, mongo::DatabaseName const&, mongo::BSONObj const&, mongo::BSONObjBuilder&);mongo::ServerStatusSection::appendSection(mongo::OperationContext*, mongo::BSONElement const&, mongo::BSONObjBuilder*) const;mongo::(anonymous namespace)::TCMallocServerStatusSection::generateSection(mongo::OperationContext*, mongo::BSONElement const&) const;mongo::(anonymous namespace)::TCMallocServerStatusSection::appendNumericPropertyIfAvailable(mongo::BSONObjBuilder&, mongo::StringData, char const*);TCMallocImplementation::GetNumericProperty(char const*, unsigned long*);tcmalloc::CentralFreeList::OverheadBytes();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 12
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::CollectionCatalog::get(mongo::OperationContext*);pthread_mutex_lock;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 12
ftdc;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FTDCController::start()::{lambda()#2}, , 0>(mongo::FTDCController::start()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FTDCController::start()::{lambda()#2}, , 0>(mongo::FTDCController::start()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::FTDCController::doLoop();mongo::FTDCCollectorCollection::collect(mongo::Client*);mongo::FTDCServerStatusCommandCollector::collect(mongo::OperationContext*, mongo::BSONObjBuilder&);mongo::CommandHelpers::runCommandDirectly(mongo::OperationContext*, mongo::OpMsgRequest const&);mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdServerStatus::run(mongo::OperationContext*, mongo::DatabaseName const&, mongo::BSONObj const&, mongo::BSONObjBuilder&);mongo::ServerStatusSection::appendSection(mongo::OperationContext*, mongo::BSONElement const&, mongo::BSONObjBuilder*) const;mongo::(anonymous namespace)::ExtraInfo::generateSection(mongo::OperationContext*, mongo::BSONElement const&) const;mongo::ProcessInfo::getExtraInfo(mongo::BSONObjBuilder&);__isoc99_fscanf;__vfscanf_internal;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 12
ftdc;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FTDCController::start()::{lambda()#2}, , 0>(mongo::FTDCController::start()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FTDCController::start()::{lambda()#2}, , 0>(mongo::FTDCController::start()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::FTDCController::doLoop();mongo::FTDCCollectorCollection::collect(mongo::Client*);mongo::FTDCServerStatusCommandCollector::collect(mongo::OperationContext*, mongo::BSONObjBuilder&);mongo::CommandHelpers::runCommandDirectly(mongo::OperationContext*, mongo::OpMsgRequest const&);mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdServerStatus::run(mongo::OperationContext*, mongo::DatabaseName const&, mongo::BSONObj const&, mongo::BSONObjBuilder&);mongo::ServerStatusSection::appendSection(mongo::OperationContext*, mongo::BSONElement const&, mongo::BSONObjBuilder*) const;mongo::(anonymous namespace)::TCMallocServerStatusSection::generateSection(mongo::OperationContext*, mongo::BSONElement const&) const;mongo::(anonymous namespace)::TCMallocServerStatusSection::appendNumericPropertyIfAvailable(mongo::BSONObjBuilder&, mongo::StringData, char const*);__strcmp_evex;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 12
mongod;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 12
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 12
ftdc;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FTDCController::start()::{lambda()#2}, , 0>(mongo::FTDCController::start()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FTDCController::start()::{lambda()#2}, , 0>(mongo::FTDCController::start()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::FTDCController::doLoop();mongo::FTDCCollectorCollection::collect(mongo::Client*);mongo::FTDCServerStatusCommandCollector::collect(mongo::OperationContext*, mongo::BSONObjBuilder&);mongo::CommandHelpers::runCommandDirectly(mongo::OperationContext*, mongo::OpMsgRequest const&);mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdServerStatus::run(mongo::OperationContext*, mongo::DatabaseName const&, mongo::BSONObj const&, mongo::BSONObjBuilder&);mongo::ServerStatusSection::appendSection(mongo::OperationContext*, mongo::BSONElement const&, mongo::BSONObjBuilder*) const;mongo::(anonymous namespace)::TCMallocServerStatusSection::generateSection(mongo::OperationContext*, mongo::BSONElement const&) const;mongo::(anonymous namespace)::TCMallocServerStatusSection::appendNumericPropertyIfAvailable(mongo::BSONObjBuilder&, mongo::StringData, char const*);TCMallocImplementation::GetNumericProperty(char const*, unsigned long*);ExtractStats(TCMallocStats*, unsigned long*, tcmalloc::PageHeap::SmallSpanStats*, tcmalloc::PageHeap::LargeSpanStats*) [clone .constprop.0];-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 12
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#3}::operator()() const;mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections);mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections, bool);mongo::AutoGetDb::createForAutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections const&);mongo::AutoGetDb::AutoGetDb(mongo::OperationContext*, mongo::DatabaseName const&, mongo::LockMode, mongo::Date_t, mongo::Lock::GlobalLockSkipOptions);mongo::Lock::DBLock::DBLock(mongo::OperationContext*, mongo::DatabaseName const&, mongo::LockMode, mongo::Date_t, mongo::Lock::GlobalLockSkipOptions);mongo::Lock::GlobalLock::GlobalLock(mongo::OperationContext*, mongo::LockMode, mongo::Date_t, mongo::Lock::InterruptBehavior, mongo::Lock::GlobalLockSkipOptions);mongo::Lock::ResourceLock::_lock(mongo::LockMode, mongo::Date_t);mongo::LockerImpl::lock(mongo::OperationContext*, mongo::ResourceId, mongo::LockMode, mongo::Date_t);mongo::LockerImpl::_lockBegin(mongo::OperationContext*, mongo::ResourceId, mongo::LockMode);mongo::LockManager::Partition::find(mongo::ResourceId);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 12
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_initiateCommand();std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_add_ref_copy();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 12
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<mongo::DbResponse>::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#2}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#2}&&) &&::{lambda(mongo::DbResponse&&)#1}::operator()(mongo::DbResponse&&) const [clone .isra.0];auto mongo::future_details::statusCall<mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#2}&, mongo::DbResponse>(mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#2}&, mongo::DbResponse&&);mongo::transport::SessionWorkflow::Impl::_acceptResponse(mongo::DbResponse);mongo::ServiceContext::killAndDelistOperation(mongo::OperationContext*, mongo::ErrorCodes::Error);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 12
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_initiateCommand();mongo::CurOp::startTime();operator new[](unsigned long);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 12
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::write_ops::WriteCommandReplyBase::serialize(mongo::BSONObjBuilder*) const;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 12
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::AutoGetCollection::~AutoGetCollection();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 12
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::RecordStore::insertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::doInsertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::_insertRecords(mongo::OperationContext*, mongo::Record*, mongo::Timestamp const*, unsigned long);mongo::WiredTigerCursor::WiredTigerCursor(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, bool, mongo::OperationContext*);mongo::WiredTigerRecoveryUnit::getSession();mongo::WiredTigerRecoveryUnit::_txnOpen();mongo::WiredTigerBeginTxnBlock::WiredTigerBeginTxnBlock(__wt_session*, mongo::PrepareConflictBehavior, mongo::WiredTigerBeginTxnBlock::RoundUpPreparedTimestamps, mongo::WiredTigerBeginTxnBlock::RoundUpReadTimestamp, mongo::RecoveryUnit::UntimestampedWriteAssertionLevel);__session_begin_transaction;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 12
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource)::{lambda()#1}::operator()() const;mongo::CurOp::done();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 12
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);auto mongo::future_details::statusCall<mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)::{lambda(mongo::DbResponse)#1}&, mongo::DbResponse>(mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)::{lambda(mongo::DbResponse)#1}&, mongo::DbResponse&&);mongo::(anonymous namespace)::HandleRequest::completeOperation(mongo::DbResponse&);__GI___lll_lock_wait;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 12
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::OpMsg::~OpMsg();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 12
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::transport::SessionWorkflow::Impl::_getNextWork();mongo::transport::SessionWorkflow::Impl::_receiveRequest();mongo::transport::CommonAsioSession::sourceMessage();mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)::{lambda()#1}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .constprop.0] [clone .isra.0];mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)::{lambda()#1}::operator()();malloc;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 12
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#3}::operator()() const;mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections);mongo::CollectionCatalog::resolveNamespaceStringOrUUID(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&) const;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 12
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_add_ref_copy();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 13
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource)::{lambda()#1}::operator()() const;mongo::Top::record(mongo::OperationContext*, mongo::StringData, mongo::LogicalOp, mongo::Top::LockType, long long, bool, mongo::Command::ReadWriteType);__memcmp_evex_movbe;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 13
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#3}::operator()() const;mongo::write_ops_exec::assertCanWrite_inlock(mongo::OperationContext*, mongo::NamespaceString const&);mongo::CollectionShardingState::assertCollectionLockedAndAcquire(mongo::OperationContext*, mongo::NamespaceString const&);mongo::CollectionShardingState::ScopedCollectionShardingState::acquireScopedCollectionShardingState(mongo::OperationContext*, mongo::NamespaceString const&, mongo::LockMode);absl::lts_20211102::hash_internal::MixingHashState absl::lts_20211102::hash_internal::AbslHashValue<absl::lts_20211102::hash_internal::MixingHashState>(absl::lts_20211102::hash_internal::MixingHashState, std::basic_string_view<char, std::char_traits<char> >);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 13
ftdc;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FTDCController::start()::{lambda()#2}, , 0>(mongo::FTDCController::start()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FTDCController::start()::{lambda()#2}, , 0>(mongo::FTDCController::start()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::FTDCController::doLoop();mongo::FTDCCollectorCollection::collect(mongo::Client*);mongo::FTDCServerStatusCommandCollector::collect(mongo::OperationContext*, mongo::BSONObjBuilder&);mongo::CommandHelpers::runCommandDirectly(mongo::OperationContext*, mongo::OpMsgRequest const&);mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdServerStatus::run(mongo::OperationContext*, mongo::DatabaseName const&, mongo::BSONObj const&, mongo::BSONObjBuilder&);mongo::ServerStatusSection::appendSection(mongo::OperationContext*, mongo::BSONElement const&, mongo::BSONObjBuilder*) const;mongo::(anonymous namespace)::TCMallocServerStatusSection::generateSection(mongo::OperationContext*, mongo::BSONElement const&) const;mongo::(anonymous namespace)::TCMallocServerStatusSection::appendNumericPropertyIfAvailable(mongo::BSONObjBuilder&, mongo::StringData, char const*);__strcmp_evex;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 13
ftdc;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FTDCController::start()::{lambda()#2}, , 0>(mongo::FTDCController::start()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FTDCController::start()::{lambda()#2}, , 0>(mongo::FTDCController::start()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::FTDCController::doLoop();mongo::FTDCCollectorCollection::collect(mongo::Client*);mongo::FTDCServerStatusCommandCollector::collect(mongo::OperationContext*, mongo::BSONObjBuilder&);mongo::CommandHelpers::runCommandDirectly(mongo::OperationContext*, mongo::OpMsgRequest const&);mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdServerStatus::run(mongo::OperationContext*, mongo::DatabaseName const&, mongo::BSONObj const&, mongo::BSONObjBuilder&);mongo::ServerStatusSection::appendSection(mongo::OperationContext*, mongo::BSONElement const&, mongo::BSONObjBuilder*) const;mongo::(anonymous namespace)::TCMallocServerStatusSection::generateSection(mongo::OperationContext*, mongo::BSONElement const&) const;mongo::(anonymous namespace)::TCMallocServerStatusSection::appendNumericPropertyIfAvailable(mongo::BSONObjBuilder&, mongo::StringData, char const*);TCMallocImplementation::GetNumericProperty(char const*, unsigned long*);tcmalloc::CentralFreeList::tc_length();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 13
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_setup();std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 13
ftdc;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FTDCController::start()::{lambda()#2}, , 0>(mongo::FTDCController::start()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FTDCController::start()::{lambda()#2}, , 0>(mongo::FTDCController::start()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::FTDCController::doLoop();mongo::FTDCCollectorCollection::collect(mongo::Client*);mongo::FTDCServerStatusCommandCollector::collect(mongo::OperationContext*, mongo::BSONObjBuilder&);mongo::CommandHelpers::runCommandDirectly(mongo::OperationContext*, mongo::OpMsgRequest const&);mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdServerStatus::run(mongo::OperationContext*, mongo::DatabaseName const&, mongo::BSONObj const&, mongo::BSONObjBuilder&);mongo::ServerStatusSection::appendSection(mongo::OperationContext*, mongo::BSONElement const&, mongo::BSONObjBuilder*) const;mongo::(anonymous namespace)::GlobalHistogramServerStatusSection::generateSection(mongo::OperationContext*, mongo::BSONElement const&) const;pthread_mutex_lock;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 13
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::IndexCatalogImpl::indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexFilteredRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::SortedDataIndexAccessMethod::insert(mongo::OperationContext*, mongo::SharedBufferFragmentBuilder&, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::insertKeysAndUpdateMultikeyPaths(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 13
ftdc;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FTDCController::start()::{lambda()#2}, , 0>(mongo::FTDCController::start()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FTDCController::start()::{lambda()#2}, , 0>(mongo::FTDCController::start()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::FTDCController::doLoop();mongo::FTDCCollectorCollection::collect(mongo::Client*);mongo::FTDCServerStatusCommandCollector::collect(mongo::OperationContext*, mongo::BSONObjBuilder&);mongo::CommandHelpers::runCommandDirectly(mongo::OperationContext*, mongo::OpMsgRequest const&);mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdServerStatus::run(mongo::OperationContext*, mongo::DatabaseName const&, mongo::BSONObj const&, mongo::BSONObjBuilder&);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 13
ftdc;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FTDCController::start()::{lambda()#2}, , 0>(mongo::FTDCController::start()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FTDCController::start()::{lambda()#2}, , 0>(mongo::FTDCController::start()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::FTDCController::doLoop();mongo::FTDCCollectorCollection::collect(mongo::Client*);mongo::FTDCServerStatusCommandCollector::collect(mongo::OperationContext*, mongo::BSONObjBuilder&);mongo::CommandHelpers::runCommandDirectly(mongo::OperationContext*, mongo::OpMsgRequest const&);mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdServerStatus::run(mongo::OperationContext*, mongo::DatabaseName const&, mongo::BSONObj const&, mongo::BSONObjBuilder&);mongo::ServerStatusSection::appendSection(mongo::OperationContext*, mongo::BSONElement const&, mongo::BSONObjBuilder*) const;mongo::(anonymous namespace)::TCMallocServerStatusSection::generateSection(mongo::OperationContext*, mongo::BSONElement const&) const;mongo::(anonymous namespace)::TCMallocServerStatusSection::appendNumericPropertyIfAvailable(mongo::BSONObjBuilder&, mongo::StringData, char const*);TCMallocImplementation::GetNumericProperty(char const*, unsigned long*);ExtractStats(TCMallocStats*, unsigned long*, tcmalloc::PageHeap::SmallSpanStats*, tcmalloc::PageHeap::LargeSpanStats*) [clone .constprop.0];tcmalloc::CentralFreeList::OverheadBytes();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 13
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_initiateCommand();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 13
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::setPrepareConflictBehaviorForReadConcern(mongo::OperationContext*, mongo::repl::ReadConcernArgs const&, mongo::PrepareConflictBehavior);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 13
ftdc;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FTDCController::start()::{lambda()#2}, , 0>(mongo::FTDCController::start()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FTDCController::start()::{lambda()#2}, , 0>(mongo::FTDCController::start()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::FTDCController::doLoop();mongo::FTDCCollectorCollection::collect(mongo::Client*);mongo::FTDCServerStatusCommandCollector::collect(mongo::OperationContext*, mongo::BSONObjBuilder&);mongo::CommandHelpers::runCommandDirectly(mongo::OperationContext*, mongo::OpMsgRequest const&);mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdServerStatus::run(mongo::OperationContext*, mongo::DatabaseName const&, mongo::BSONObj const&, mongo::BSONObjBuilder&);mongo::ServerStatusSection::appendSection(mongo::OperationContext*, mongo::BSONElement const&, mongo::BSONObjBuilder*) const;mongo::(anonymous namespace)::Security::generateSection(mongo::OperationContext*, mongo::BSONElement const&) const;mongo::BSONObj mongo::BSONObjBuilder::obj<mongo::BSONObj::DefaultSizeTrait>();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 13
TTLMonitor;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::BackgroundJob::jobBody();mongo::TTLMonitor::run();mongo::TTLMonitor::_doTTLPass(mongo::OperationContext*);mongo::TTLMonitor::_doTTLSubPass(mongo::OperationContext*, absl::lts_20211102::node_hash_map<mongo::UUID, long long, mongo::HashImprover<mongo::UUID::Hash, mongo::UUID>, std::equal_to<mongo::UUID>, std::allocator<std::pair<mongo::UUID const, long long> > >&);mongo::TTLMonitor::_doTTLIndexDelete(mongo::OperationContext*, mongo::TTLCollectionCache*, mongo::UUID const&, mongo::TTLCollectionCache::Info const&);mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections);mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections, bool);mongo::AutoGetDb::createForAutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections const&);mongo::AutoGetDb::AutoGetDb(mongo::OperationContext*, mongo::DatabaseName const&, mongo::LockMode, mongo::Date_t, mongo::Lock::GlobalLockSkipOptions);mongo::Lock::DBLock::DBLock(mongo::OperationContext*, mongo::DatabaseName const&, mongo::LockMode, mongo::Date_t, mongo::Lock::GlobalLockSkipOptions);mongo::Lock::GlobalLock::GlobalLock(mongo::OperationContext*, mongo::LockMode, mongo::Date_t, mongo::Lock::InterruptBehavior, mongo::Lock::GlobalLockSkipOptions);mongo::Lock::ResourceLock::_lock(mongo::LockMode, mongo::Date_t);mongo::LockerImpl::lock(mongo::OperationContext*, mongo::ResourceId, mongo::LockMode, mongo::Date_t);mongo::LockerImpl::_lockBegin(mongo::OperationContext*, mongo::ResourceId, mongo::LockMode);__GI___lll_lock_wait;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 13
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);auto mongo::future_util::AsyncState<mongo::(anonymous namespace)::ExecCommandDatabase>::make<std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext> >(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>&&);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::parse(mongo::OperationContext*, mongo::OpMsgRequest const&);mongo::write_ops::InsertCommandRequest::parse(mongo::IDLParserContext const&, mongo::OpMsgRequest const&);mongo::write_ops::InsertCommandRequest::parseProtected(mongo::IDLParserContext const&, mongo::OpMsgRequest const&);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 13
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_initiateCommand();mongo::initializeOperationSessionInfo(mongo::OperationContext*, mongo::BSONObj const&, bool, bool, bool);mongo::OperationSessionInfoFromClient::parse(mongo::IDLParserContext const&, mongo::BSONObj const&);mongo::operator==(mongo::StringData, mongo::StringData);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 13
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;std::unique_ptr<mongo::(anonymous namespace)::ExecCommandDatabase, std::default_delete<mongo::(anonymous namespace)::ExecCommandDatabase> >::~unique_ptr();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 13
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::IndexCatalogImpl::indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexFilteredRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::SortedDataIndexAccessMethod::insert(mongo::OperationContext*, mongo::SharedBufferFragmentBuilder&, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::getKeys(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, mongo::SharedBufferFragmentBuilder&, mongo::BSONObj const&, mongo::InsertDeleteOptions::ConstraintEnforcementMode, mongo::SortedDataIndexAccessMethod::GetKeysContext, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void>*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void>*, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void>*, boost::optional<mongo::RecordId> const&, std::function<void (mongo::OperationContext*, mongo::IndexCatalogEntry const*, mongo::Status, mongo::BSONObj const&, boost::optional<mongo::RecordId> const&)> const&, std::function<bool (mongo::OperationContext*, mongo::CollectionPtr const&)> const&) const;mongo::BtreeKeyGenerator::getKeys(mongo::SharedBufferFragmentBuilder&, mongo::BSONObj const&, bool, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void>*, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void>*, mongo::CollatorInterface const*, boost::optional<mongo::RecordId> const&) const;boost::container::dtl::flat_tree<mongo::KeyString::Value, boost::move_detail::identity<mongo::KeyString::Value>, std::less<mongo::KeyString::Value>, void>::insert_unique(mongo::KeyString::Value&&);operator new[](unsigned long);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 14
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 14
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::RecordStore::insertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::doInsertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::_insertRecords(mongo::OperationContext*, mongo::Record*, mongo::Timestamp const*, unsigned long);mongo::WiredTigerCursor::WiredTigerCursor(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, bool, mongo::OperationContext*);mongo::WiredTigerRecoveryUnit::getSession();mongo::WiredTigerRecoveryUnit::_txnOpen();mongo::WiredTigerBeginTxnBlock::WiredTigerBeginTxnBlock(__wt_session*, mongo::PrepareConflictBehavior, mongo::WiredTigerBeginTxnBlock::RoundUpPreparedTimestamps, mongo::WiredTigerBeginTxnBlock::RoundUpReadTimestamp, mongo::RecoveryUnit::UntimestampedWriteAssertionLevel);__session_begin_transaction;__wt_txn_config;__wt_config_gets_def;__strlen_evex;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 14
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#3}::operator()() const;mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections);mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections, bool);mongo::AutoGetDb::createForAutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections const&);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 14
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::IndexCatalogImpl::indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexFilteredRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::SortedDataIndexAccessMethod::insert(mongo::OperationContext*, mongo::SharedBufferFragmentBuilder&, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::_indexKeysOrWriteToSideTable(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::BSONObj const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::insertKeysAndUpdateMultikeyPaths(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::SortedDataIndexAccessMethod::insertKeys(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::WiredTigerIndex::insert(mongo::OperationContext*, mongo::KeyString::Value const&, bool, mongo::IncludeDuplicateRecordId);mongo::WiredTigerIdIndex::_insert(mongo::OperationContext*, __wt_cursor*, mongo::KeyString::Value const&, bool, mongo::IncludeDuplicateRecordId);mongo::wiredTigerCursorInsert(mongo::OperationContext*, __wt_cursor*);__curfile_insert;__wt_btcur_insert;pthread_mutex_lock;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 14
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::OpObserverRegistry::onInserts(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, std::vector<bool, std::allocator<bool> >, bool);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 14
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandImpl::_epilogue();mongo::(anonymous namespace)::CmdInsert::Invocation::ns() const;std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 14
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_initiateCommand();mongo::OpMsgRequest::getDatabase() const;__strlen_evex;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 14
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::IndexCatalogImpl::indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexFilteredRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::SortedDataIndexAccessMethod::insert(mongo::OperationContext*, mongo::SharedBufferFragmentBuilder&, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::_indexKeysOrWriteToSideTable(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::BSONObj const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::insertKeysAndUpdateMultikeyPaths(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::SortedDataIndexAccessMethod::insertKeys(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::WiredTigerIndex::insert(mongo::OperationContext*, mongo::KeyString::Value const&, bool, mongo::IncludeDuplicateRecordId);mongo::WiredTigerIdIndex::_insert(mongo::OperationContext*, __wt_cursor*, mongo::KeyString::Value const&, bool, mongo::IncludeDuplicateRecordId);mongo::wiredTigerCursorInsert(mongo::OperationContext*, __wt_cursor*);__curfile_insert;__wt_session_gen_enter;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 14
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 14
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::RecordStore::insertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::doInsertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::_insertRecords(mongo::OperationContext*, mongo::Record*, mongo::Timestamp const*, unsigned long);mongo::WiredTigerRecordStore::_changeNumRecordsAndDataSize(mongo::OperationContext*, long, long);operator new[](unsigned long);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 14
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#3}::operator()() const;mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections);mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections, bool);mongo::(anonymous namespace)::verifyDbAndCollection(mongo::OperationContext*, mongo::LockMode, mongo::NamespaceStringOrUUID const&, mongo::NamespaceString const&, mongo::Collection const*, mongo::Database*, bool);__pthread_mutex_unlock;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 15
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::RecordStore::insertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::doInsertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::_insertRecords(mongo::OperationContext*, mongo::Record*, mongo::Timestamp const*, unsigned long);mongo::wiredTigerCursorInsert(mongo::OperationContext*, __wt_cursor*);__curfile_insert;__wt_btcur_insert;__wt_cursor_func_init.constprop.0;__wt_eviction_needed;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 15
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_scheduleIteration();mongo::OperationContext::~OperationContext();mongo::OperationContext::~OperationContext();mongo::WiredTigerRecoveryUnit::~WiredTigerRecoveryUnit();mongo::WiredTigerRecoveryUnit::~WiredTigerRecoveryUnit();mongo::WiredTigerSessionCache::releaseSession(mongo::WiredTigerSession*);mongo::WiredTigerSession::closeAllCursors(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&);__curfile_close;__wt_cursor_cache_release;__wt_session_release_dhandle;__wt_readunlock;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 15
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#3}::operator()() const;mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections);mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections, bool);mongo::AutoGetDb::createForAutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections const&);mongo::AutoGetDb::AutoGetDb(mongo::OperationContext*, mongo::DatabaseName const&, mongo::LockMode, mongo::Date_t, mongo::Lock::GlobalLockSkipOptions);mongo::Lock::DBLock::DBLock(mongo::OperationContext*, mongo::DatabaseName const&, mongo::LockMode, mongo::Date_t, mongo::Lock::GlobalLockSkipOptions);mongo::Lock::GlobalLock::GlobalLock(mongo::OperationContext*, mongo::LockMode, mongo::Date_t, mongo::Lock::InterruptBehavior, mongo::Lock::GlobalLockSkipOptions);mongo::Lock::ResourceLock::_lock(mongo::LockMode, mongo::Date_t);mongo::LockerImpl::lock(mongo::OperationContext*, mongo::ResourceId, mongo::LockMode, mongo::Date_t);mongo::LockerImpl::_lockBegin(mongo::OperationContext*, mongo::ResourceId, mongo::LockMode);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 15
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_initiateCommand();mongo::rpc::TrackingMetadata::initWithOperName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&);mongo::OID::init();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 15
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::RecordStore::insertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::doInsertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::_insertRecords(mongo::OperationContext*, mongo::Record*, mongo::Timestamp const*, unsigned long);mongo::WiredTigerCursor::~WiredTigerCursor();mongo::WiredTigerSession::releaseCursor(unsigned long, __wt_cursor*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&);__curfile_reset;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 15
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_scheduleIteration();mongo::OperationContext::~OperationContext();mongo::OperationContext::~OperationContext();mongo::WiredTigerRecoveryUnit::~WiredTigerRecoveryUnit();mongo::WiredTigerRecoveryUnit::~WiredTigerRecoveryUnit();mongo::WiredTigerSessionCache::releaseSession(mongo::WiredTigerSession*);mongo::WiredTigerSession::closeAllCursors(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&);__curfile_close;__wt_cursor_cache_release;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 15
ftdc;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FTDCController::start()::{lambda()#2}, , 0>(mongo::FTDCController::start()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FTDCController::start()::{lambda()#2}, , 0>(mongo::FTDCController::start()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::FTDCController::doLoop();mongo::FTDCCollectorCollection::collect(mongo::Client*);mongo::FTDCServerStatusCommandCollector::collect(mongo::OperationContext*, mongo::BSONObjBuilder&);mongo::CommandHelpers::runCommandDirectly(mongo::OperationContext*, mongo::OpMsgRequest const&);mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdServerStatus::run(mongo::OperationContext*, mongo::DatabaseName const&, mongo::BSONObj const&, mongo::BSONObjBuilder&);mongo::ServerStatusSection::appendSection(mongo::OperationContext*, mongo::BSONElement const&, mongo::BSONObjBuilder*) const;mongo::(anonymous namespace)::Network::generateSection(mongo::OperationContext*, mongo::BSONElement const&) const;mongo::transport::TransportLayerManager::appendStatsForServerStatus(mongo::BSONObjBuilder*) const;mongo::transport::AsioTransportLayer::appendStatsForServerStatus(mongo::BSONObjBuilder*) const;mongo::BSONObjBuilder::BSONObjBuilder();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 15
ftdc;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FTDCController::start()::{lambda()#2}, , 0>(mongo::FTDCController::start()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FTDCController::start()::{lambda()#2}, , 0>(mongo::FTDCController::start()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::FTDCController::doLoop();mongo::FTDCCollectorCollection::collect(mongo::Client*);mongo::FTDCServerStatusCommandCollector::collect(mongo::OperationContext*, mongo::BSONObjBuilder&);mongo::CommandHelpers::runCommandDirectly(mongo::OperationContext*, mongo::OpMsgRequest const&);mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdServerStatus::run(mongo::OperationContext*, mongo::DatabaseName const&, mongo::BSONObj const&, mongo::BSONObjBuilder&);mongo::ServerStatusSection::appendSection(mongo::OperationContext*, mongo::BSONElement const&, mongo::BSONObjBuilder*) const;mongo::AuthCounter::append(mongo::BSONObjBuilder*);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 15
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_scheduleIteration();mongo::OperationContext::~OperationContext();std::vector<mongo::repl::ReplOperation, std::allocator<mongo::repl::ReplOperation> >::~vector();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 15
mongod;start_thread;__log_server;__wt_log_force_write;__wt_log_slot_switch;__log_slot_switch_internal;__wt_log_release;__log_fs_write;pwrite64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_pwrite64;vfs_write;ext4_file_write_iter;ext4_buffered_write_iter;generic_perform_write;__cond_resched;finish_task_switch.isra.0 15
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::RecordStore::insertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::doInsertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::_insertRecords(mongo::OperationContext*, mongo::Record*, mongo::Timestamp const*, unsigned long);mongo::wiredTigerCursorInsert(mongo::OperationContext*, __wt_cursor*);__curfile_insert;__wt_btcur_insert;__wt_row_search;__wt_page_in_func;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 15
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::IndexCatalogImpl::indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexFilteredRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::SortedDataIndexAccessMethod::insert(mongo::OperationContext*, mongo::SharedBufferFragmentBuilder&, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::_indexKeysOrWriteToSideTable(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::BSONObj const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::insertKeysAndUpdateMultikeyPaths(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::SortedDataIndexAccessMethod::insertKeys(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::WiredTigerIndex::insert(mongo::OperationContext*, mongo::KeyString::Value const&, bool, mongo::IncludeDuplicateRecordId);mongo::WiredTigerIdIndex::_insert(mongo::OperationContext*, __wt_cursor*, mongo::KeyString::Value const&, bool, mongo::IncludeDuplicateRecordId);mongo::wiredTigerCursorInsert(mongo::OperationContext*, __wt_cursor*);__curfile_insert;__wt_session_gen_leave;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 16
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_initiateCommand();mongo::CommandHelpers::evaluateFailCommandFailPoint(mongo::OperationContext*, mongo::CommandInvocation const*);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 16
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_scheduleIteration();mongo::OperationContext::~OperationContext();mongo::OperationContext::~OperationContext();mongo::WiredTigerRecoveryUnit::~WiredTigerRecoveryUnit();mongo::WiredTigerRecoveryUnit::~WiredTigerRecoveryUnit();mongo::WiredTigerSessionCache::releaseSession(mongo::WiredTigerSession*);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 16
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_scheduleIteration();mongo::OperationContext::~OperationContext();mongo::OperationContext::~OperationContext();mongo::WiredTigerRecoveryUnit::~WiredTigerRecoveryUnit();mongo::WiredTigerRecoveryUnit::~WiredTigerRecoveryUnit();mongo::WiredTigerSessionCache::releaseSession(mongo::WiredTigerSession*);mongo::WiredTigerSession::closeAllCursors(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&);__curfile_close;__wt_cursor_cache_release;__curfile_cache;__wt_cursor_cache;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 16
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#3}::operator()() const;mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections);mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections, bool);mongo::AutoGetDb::createForAutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections const&);mongo::NamespaceString::isReplicated() const;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 16
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#3}::operator()() const;mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections);mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections, bool);mongo::CollectionCatalog::lookupCollectionByNamespace(mongo::OperationContext*, mongo::NamespaceString const&) const;decltype(auto) immer::detail::hamts::champ<std::pair<mongo::NamespaceString, std::shared_ptr<mongo::Collection> >, immer::map<mongo::NamespaceString, std::shared_ptr<mongo::Collection>, absl::lts_20211102::hash_internal::Hash<mongo::NamespaceString>, std::equal_to<mongo::NamespaceString>, immer::memory_policy<immer::heap_policy<immer::cpp_heap>, immer::refcount_policy, void, immer::no_transience_policy, true, true>, 5u>::hash_key, immer::map<mongo::NamespaceString, std::shared_ptr<mongo::Collection>, absl::lts_20211102::hash_internal::Hash<mongo::NamespaceString>, std::equal_to<mongo::NamespaceString>, immer::memory_policy<immer::heap_policy<immer::cpp_heap>, immer::refcount_policy, void, immer::no_transience_policy, true, true>, 5u>::equal_key, immer::memory_policy<immer::heap_policy<immer::cpp_heap>, immer::refcount_policy, void, immer::no_transience_policy, true, true>, 5u>::get<immer::map<mongo::NamespaceString, std::shared_ptr<mongo::Collection>, absl::lts_20211102::hash_internal::Hash<mongo::NamespaceString>, std::equal_to<mongo::NamespaceString>, immer::memory_policy<immer::heap_policy<immer::cpp_heap>, immer::refcount_policy, void, immer::no_transience_policy, true, true>, 5u>::project_value_ptr, immer::detail::constantly<std::shared_ptr<mongo::Collection> const*, (std::shared_ptr<mongo::Collection> const*)0>, mongo::NamespaceString>(mongo::NamespaceString const&) const [clone .isra.0];__memcmp_evex_movbe;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 16
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 16
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_scheduleIteration();mongo::OperationContext::~OperationContext();void mongo::DecorationRegistry<mongo::OperationContext>::destroyAt<boost::optional<mongo::auth::ValidatedTenancyScope> >(void*);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 16
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::RecordStore::insertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::doInsertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::_insertRecords(mongo::OperationContext*, mongo::Record*, mongo::Timestamp const*, unsigned long);mongo::WiredTigerCursor::WiredTigerCursor(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, bool, mongo::OperationContext*);mongo::WiredTigerRecoveryUnit::getSession();mongo::WiredTigerRecoveryUnit::_txnOpen();mongo::WiredTigerBeginTxnBlock::WiredTigerBeginTxnBlock(__wt_session*, mongo::PrepareConflictBehavior, mongo::WiredTigerBeginTxnBlock::RoundUpPreparedTimestamps, mongo::WiredTigerBeginTxnBlock::RoundUpReadTimestamp, mongo::RecoveryUnit::UntimestampedWriteAssertionLevel);__session_begin_transaction;__wt_txn_config;__wt_config_gets_def;__strlen_evex;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 16
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);auto mongo::future_details::statusCall<mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)::{lambda(mongo::DbResponse)#1}&, mongo::DbResponse>(mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)::{lambda(mongo::DbResponse)#1}&, mongo::DbResponse&&);mongo::recordCurOpMetrics(mongo::OperationContext*);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 16
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::RecordStore::insertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::doInsertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::_insertRecords(mongo::OperationContext*, mongo::Record*, mongo::Timestamp const*, unsigned long);mongo::WiredTigerCursor::WiredTigerCursor(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, bool, mongo::OperationContext*);mongo::WiredTigerRecoveryUnit::getSession();mongo::WiredTigerRecoveryUnit::_txnOpen();__session_begin_transaction;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 16
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 16
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);auto mongo::future_util::AsyncState<mongo::(anonymous namespace)::ExecCommandDatabase>::make<std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext> >(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>&&);mongo::VectorClock::get(mongo::OperationContext*);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 17
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::IndexCatalogImpl::indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexFilteredRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::SortedDataIndexAccessMethod::insert(mongo::OperationContext*, mongo::SharedBufferFragmentBuilder&, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, mongo::InsertDeleteOptions const&, long*);mongo::FeatureFlag::isEnabledAndIgnoreFCVUnsafe() const;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 17
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 17
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::rpc::opMsgRequestFromAnyProtocol(mongo::Message const&, mongo::Client*);mongo::OpMsg::parse(mongo::Message const&, mongo::Client*);mongo::BSONObj::getField(mongo::StringData) const;mongo::BSONElement::computeSize(signed char, char const*, int, int);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 17
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_scheduleIteration();mongo::OperationContext::~OperationContext();mongo::OperationContext::~OperationContext();mongo::LockerImpl::~LockerImpl();operator delete(void*, unsigned long);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 17
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::transport::SessionWorkflow::Impl::_getNextWork();mongo::transport::SessionWorkflow::Impl::_receiveRequest();mongo::transport::CommonAsioSession::sourceMessage();mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)::{lambda()#1}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .constprop.0] [clone .isra.0];mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)::{lambda()#1}::operator()();mongo::Future<void> mongo::transport::CommonAsioSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 17
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#3}::operator()() const;mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections);mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections, bool);mongo::CollectionCatalog::lookupCollectionByNamespace(mongo::OperationContext*, mongo::NamespaceString const&) const;std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 17
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<mongo::DbResponse>::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#2}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#2}&&) &&::{lambda(mongo::DbResponse&&)#1}::operator()(mongo::DbResponse&&) const [clone .isra.0];auto mongo::future_details::statusCall<mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#2}&, mongo::DbResponse>(mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#2}&, mongo::DbResponse&&);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 17
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::WriteUnitOfWork::commit();mongo::RecoveryUnit::commitUnitOfWork();mongo::WiredTigerRecoveryUnit::_commit();mongo::WiredTigerRecoveryUnit::_txnClose(bool);__session_commit_transaction;__wt_txn_commit;__wt_log_write;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 17
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::transport::SessionWorkflow::Impl::_getNextWork();mongo::transport::SessionWorkflow::Impl::_receiveRequest();mongo::transport::CommonAsioSession::sourceMessage();mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)::{lambda()#1}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .constprop.0] [clone .isra.0];mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)::{lambda()#1}::operator()();mongo::Future<void> mongo::transport::CommonAsioSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&);mongo::Future<void> mongo::transport::CommonAsioSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&);asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&);recvmsg;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_recvmsg;__sys_recvmsg;___sys_recvmsg;____sys_recvmsg;sock_recvmsg;inet_recvmsg;tcp_recvmsg;tcp_recvmsg_locked;skb_copy_datagram_iter;__skb_datagram_iter;__cond_resched;finish_task_switch.isra.0 17
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 17
ftdc;__GI_read;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 18
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 18
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_initiateCommand();std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_add_ref_copy();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 18
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::Client::makeOperationContext();mongo::ServiceContext::makeOperationContext(mongo::Client*);mongo::UniqueOperationIdRegistry::acquireSlot();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 18
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 18
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::RecordStore::insertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::doInsertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::_insertRecords(mongo::OperationContext*, mongo::Record*, mongo::Timestamp const*, unsigned long);mongo::wiredTigerCursorInsert(mongo::OperationContext*, __wt_cursor*);__curfile_insert;__wt_btcur_insert;__wt_row_search;__wt_page_in_func;__wt_hazard_set_func;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 18
conn1;[Missed User Stack];asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 18
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::rpc::opMsgRequestFromAnyProtocol(mongo::Message const&, mongo::Client*);mongo::OpMsg::parse(mongo::Message const&, mongo::Client*);mongo::dotted_path_support::extractElementAtPathOrArrayAlongPath(mongo::BSONObj const&, char const*&);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 18
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_initiateCommand();absl::lts_20211102::container_internal::raw_hash_set<absl::lts_20211102::container_internal::FlatHashSetPolicy<mongo::StringData>, mongo::StringMapHasher, mongo::StringMapEq, std::allocator<mongo::StringData> >::prepare_insert(unsigned long);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 19
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_initiateCommand();mongo::CommandHelpers::auditLogAuthEvent(mongo::OperationContext*, mongo::CommandInvocation const*, mongo::OpMsgRequest const&, mongo::ErrorCodes::Error);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 19
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::IndexCatalogImpl::indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexFilteredRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::SortedDataIndexAccessMethod::insert(mongo::OperationContext*, mongo::SharedBufferFragmentBuilder&, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::_indexKeysOrWriteToSideTable(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::BSONObj const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::insertKeysAndUpdateMultikeyPaths(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::SortedDataIndexAccessMethod::insertKeys(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::WiredTigerIndex::insert(mongo::OperationContext*, mongo::KeyString::Value const&, bool, mongo::IncludeDuplicateRecordId);mongo::WiredTigerIdIndex::_insert(mongo::OperationContext*, __wt_cursor*, mongo::KeyString::Value const&, bool, mongo::IncludeDuplicateRecordId);mongo::wiredTigerCursorInsert(mongo::OperationContext*, __wt_cursor*);__curfile_insert;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 19
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#3}::operator()() const;mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections);mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections, bool);mongo::AutoGetDb::createForAutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections const&);mongo::AutoGetDb::AutoGetDb(mongo::OperationContext*, mongo::DatabaseName const&, mongo::LockMode, mongo::Date_t, mongo::Lock::GlobalLockSkipOptions);mongo::DatabaseHolderImpl::getDb(mongo::OperationContext*, mongo::DatabaseName const&) const;mongo::LockerImpl::isDbLockedForMode(mongo::DatabaseName const&, mongo::LockMode) const;mongo::LockerImpl::getLockMode(mongo::ResourceId) const;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 19
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#3}::operator()() const;mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections);mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections, bool);mongo::LockedCollectionYieldRestore::LockedCollectionYieldRestore(mongo::OperationContext*, mongo::CollectionPtr const&);mongo::LockerImpl::isCollectionLockedForMode(mongo::NamespaceString const&, mongo::LockMode) const;mongo::LockerImpl::getLockMode(mongo::ResourceId) const;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 19
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_initiateCommand();mongo::CommandInvocation::checkAuthorization(mongo::OperationContext*, mongo::OpMsgRequest const&) const;mongo::AuthorizationSessionImpl::getAuthorizationManager();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 19
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#3}::operator()() const;mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections);mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections, bool);mongo::CollectionShardingState::acquire(mongo::OperationContext*, mongo::NamespaceString const&);mongo::CollectionShardingState::ScopedCollectionShardingState::acquireScopedCollectionShardingState(mongo::OperationContext*, mongo::NamespaceString const&, mongo::LockMode);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 19
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 19
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::RecordStore::insertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::doInsertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::_insertRecords(mongo::OperationContext*, mongo::Record*, mongo::Timestamp const*, unsigned long);mongo::wiredTigerCursorInsert(mongo::OperationContext*, __wt_cursor*);__curfile_insert;__wt_cursor_func_init.constprop.0;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 19
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);auto mongo::future_util::AsyncState<mongo::(anonymous namespace)::ExecCommandDatabase>::make<std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext> >(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>&&);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::parse(mongo::OperationContext*, mongo::OpMsgRequest const&);mongo::write_ops::InsertCommandRequest::parse(mongo::IDLParserContext const&, mongo::OpMsgRequest const&);mongo::BSONElement::fieldNameStringData() const;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 19
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::WriteUnitOfWork::commit();mongo::RecoveryUnit::commitUnitOfWork();mongo::WiredTigerRecoveryUnit::_commit();mongo::WiredTigerRecoveryUnit::_txnClose(bool);std::_Deque_base<mongo::Timestamp, std::allocator<mongo::Timestamp> >::~_Deque_base();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 19
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#3}::operator()() const;mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections);mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections, bool);mongo::AutoGetDb::createForAutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections const&);mongo::AutoGetDb::AutoGetDb(mongo::OperationContext*, mongo::DatabaseName const&, mongo::LockMode, mongo::Date_t, mongo::Lock::GlobalLockSkipOptions);mongo::Lock::DBLock::DBLock(mongo::OperationContext*, mongo::DatabaseName const&, mongo::LockMode, mongo::Date_t, mongo::Lock::GlobalLockSkipOptions);mongo::LockerImpl::lock(mongo::OperationContext*, mongo::ResourceId, mongo::LockMode, mongo::Date_t);mongo::LockerImpl::_lockBegin(mongo::OperationContext*, mongo::ResourceId, mongo::LockMode);pthread_mutex_lock;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 19
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::WriteUnitOfWork::commit();mongo::RecoveryUnit::commitUnitOfWork();mongo::WiredTigerRecoveryUnit::_commit();mongo::WiredTigerRecoveryUnit::_txnClose(bool);__session_commit_transaction;__wt_txn_commit;__wt_txn_op_set_timestamp;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 19
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_scheduleIteration();mongo::OperationContext::~OperationContext();mongo::OperationContext::~OperationContext();std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 19
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 20
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::IndexCatalogImpl::indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexFilteredRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::SortedDataIndexAccessMethod::insert(mongo::OperationContext*, mongo::SharedBufferFragmentBuilder&, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::_indexKeysOrWriteToSideTable(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::BSONObj const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::insertKeysAndUpdateMultikeyPaths(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::SortedDataIndexAccessMethod::insertKeys(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::WiredTigerIndex::insert(mongo::OperationContext*, mongo::KeyString::Value const&, bool, mongo::IncludeDuplicateRecordId);mongo::WiredTigerIdIndex::_insert(mongo::OperationContext*, __wt_cursor*, mongo::KeyString::Value const&, bool, mongo::IncludeDuplicateRecordId);mongo::KeyString::BuilderBase<mongo::KeyString::Builder>::_appendRecordIdLong(long);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 20
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::Client::makeOperationContext();mongo::ServiceContext::makeOperationContext(mongo::Client*);mongo::(anonymous namespace)::StorageClientObserver::onCreateOperationContext(mongo::OperationContext*);mongo::LockerImpl::LockerImpl(mongo::ServiceContext*);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 20
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::transport::SessionWorkflow::Impl::_getNextWork();mongo::transport::SessionWorkflow::Impl::_receiveRequest();mongo::transport::CommonAsioSession::sourceMessage();mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)::{lambda()#1}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .constprop.0] [clone .isra.0];mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)::{lambda()#1}::operator()();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 20
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_scheduleIteration();mongo::OperationContext::~OperationContext();mongo::OperationContext::~OperationContext();mongo::WiredTigerRecoveryUnit::~WiredTigerRecoveryUnit();mongo::WiredTigerRecoveryUnit::~WiredTigerRecoveryUnit();mongo::WiredTigerSessionCache::releaseSession(mongo::WiredTigerSession*);mongo::WiredTigerSession::closeAllCursors(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&);__curfile_close;__wt_cursor_cache_release;__curfile_cache;__wt_cursor_cache;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 20
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 21
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::Client::makeOperationContext();mongo::ServiceContext::makeOperationContext(mongo::Client*);mongo::OperationContext::OperationContext(mongo::Client*, mongo::UniqueOperationIdRegistry::OperationIdSlot&&);void mongo::DecorationRegistry<mongo::OperationContext>::constructAt<mongo::CurOp::CurOpStack>(void*);mongo::CurOp::CurOpStack::_pushNoLock(mongo::CurOp*);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 21
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::transport::SessionWorkflow::Impl::_getNextWork();mongo::transport::SessionWorkflow::Impl::_receiveRequest();mongo::transport::CommonAsioSession::sourceMessage();mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)::{lambda()#1}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .constprop.0] [clone .isra.0];mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)::{lambda()#1}::operator()();mongo::Future<void> mongo::transport::CommonAsioSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&);mongo::Future<void> mongo::transport::CommonAsioSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&);asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&);asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 21
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::RecordStore::insertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::doInsertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::_insertRecords(mongo::OperationContext*, mongo::Record*, mongo::Timestamp const*, unsigned long);mongo::wiredTigerCursorInsert(mongo::OperationContext*, __wt_cursor*);__curfile_insert;__wt_btcur_insert;__wt_row_search;__wt_page_in_func;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 21
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#3}::operator()() const;mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections);mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections, bool);mongo::AutoGetDb::createForAutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections const&);mongo::AutoGetDb::AutoGetDb(mongo::OperationContext*, mongo::DatabaseName const&, mongo::LockMode, mongo::Date_t, mongo::Lock::GlobalLockSkipOptions);mongo::Lock::DBLock::DBLock(mongo::OperationContext*, mongo::DatabaseName const&, mongo::LockMode, mongo::Date_t, mongo::Lock::GlobalLockSkipOptions);mongo::Lock::GlobalLock::GlobalLock(mongo::OperationContext*, mongo::LockMode, mongo::Date_t, mongo::Lock::InterruptBehavior, mongo::Lock::GlobalLockSkipOptions);mongo::Lock::ResourceLock::_lock(mongo::LockMode, mongo::Date_t);mongo::LockerImpl::lock(mongo::OperationContext*, mongo::ResourceId, mongo::LockMode, mongo::Date_t);mongo::LockerImpl::_lockBegin(mongo::OperationContext*, mongo::ResourceId, mongo::LockMode);__GI___lll_lock_wait;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 21
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#3}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::makeCollection(mongo::OperationContext*, mongo::NamespaceString const&);mongo::write_ops_exec::(anonymous namespace)::makeCollection(mongo::OperationContext*, mongo::NamespaceString const&)::{lambda()#1}::operator()() const;mongo::DatabaseImpl::userCreateNS(mongo::OperationContext*, mongo::NamespaceString const&, mongo::CollectionOptions, bool, mongo::BSONObj const&, bool) const;mongo::DatabaseImpl::_createCollection(mongo::OperationContext*, mongo::NamespaceString const&, mongo::CollectionOptions const&, bool, mongo::BSONObj const&, bool, boost::optional<mongo::VirtualCollectionOptions> const&) const;mongo::DurableCatalogImpl::createCollection(mongo::OperationContext*, mongo::NamespaceString const&, mongo::CollectionOptions const&, bool);mongo::WiredTigerKVEngine::createRecordStore(mongo::OperationContext*, mongo::NamespaceString const&, mongo::StringData, mongo::CollectionOptions const&, mongo::KeyFormat);__session_create;__wt_session_create;__wt_schema_create;__wt_meta_track_off;__wt_txn_checkpoint_log;__wt_log_write;__wt_log_release;__log_fsync_file;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;file_write_and_wait_range;__filemap_fdatawait_range;folio_wait_writeback;folio_wait_bit;folio_wait_bit_common;io_schedule;schedule;finish_task_switch.isra.0 22
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();__pthread_mutex_unlock;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 22
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::IndexCatalogImpl::indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexFilteredRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::SortedDataIndexAccessMethod::insert(mongo::OperationContext*, mongo::SharedBufferFragmentBuilder&, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::_indexKeysOrWriteToSideTable(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::BSONObj const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::insertKeysAndUpdateMultikeyPaths(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::SortedDataIndexAccessMethod::insertKeys(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::WiredTigerIndex::insert(mongo::OperationContext*, mongo::KeyString::Value const&, bool, mongo::IncludeDuplicateRecordId);mongo::WiredTigerIdIndex::_insert(mongo::OperationContext*, __wt_cursor*, mongo::KeyString::Value const&, bool, mongo::IncludeDuplicateRecordId);mongo::wiredTigerCursorInsert(mongo::OperationContext*, __wt_cursor*);__curfile_insert;__wt_btcur_insert;__wt_row_modify;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 22
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_initiateCommand();mongo::AuthorizationManager::get(mongo::ServiceContext*);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 22
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_initiateCommand();mongo::OpMsgRequest::getDatabase() const;__strlen_evex;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 22
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);auto mongo::future_util::AsyncState<mongo::(anonymous namespace)::ExecCommandDatabase>::make<std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext> >(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>&&);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::parse(mongo::OperationContext*, mongo::OpMsgRequest const&);mongo::write_ops::InsertCommandRequest::parse(mongo::IDLParserContext const&, mongo::OpMsgRequest const&);mongo::write_ops::InsertCommandRequest::parseProtected(mongo::IDLParserContext const&, mongo::OpMsgRequest const&);mongo::isGenericArgument(mongo::StringData);mongo::Generic_args_api_v1::hasField(mongo::StringData);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 22
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_initiateCommand();mongo::(anonymous namespace)::_extractReadConcern(mongo::OperationContext*, mongo::CommandInvocation const*, mongo::BSONObj const&, bool, bool);__strlen_evex;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 22
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);auto mongo::future_details::statusCall<mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)::{lambda(mongo::DbResponse)#1}&, mongo::DbResponse>(mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)::{lambda(mongo::DbResponse)#1}&, mongo::DbResponse&&);mongo::(anonymous namespace)::HandleRequest::completeOperation(mongo::DbResponse&);mongo::recordCurOpMetrics(mongo::OperationContext*);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 22
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::RecordStore::insertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::doInsertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::_insertRecords(mongo::OperationContext*, mongo::Record*, mongo::Timestamp const*, unsigned long);__curfile_insert;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 23
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_scheduleIteration();mongo::OperationContext::~OperationContext();mongo::OperationContext::~OperationContext();mongo::WiredTigerRecoveryUnit::~WiredTigerRecoveryUnit();mongo::WiredTigerRecoveryUnit::~WiredTigerRecoveryUnit();mongo::WiredTigerSessionCache::releaseSession(mongo::WiredTigerSession*);mongo::WiredTigerSession::closeAllCursors(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&);__curfile_close;__wt_cursor_cache_release;__curfile_cache;__wt_cursor_cache;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 23
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_scheduleIteration();mongo::OperationContext::~OperationContext();mongo::OperationContext::~OperationContext();mongo::WiredTigerRecoveryUnit::~WiredTigerRecoveryUnit();mongo::WiredTigerRecoveryUnit::~WiredTigerRecoveryUnit();mongo::WiredTigerSessionCache::releaseSession(mongo::WiredTigerSession*);mongo::WiredTigerSession::closeAllCursors(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&);__curfile_close;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 23
mongod;start_thread;__log_server;__wt_log_force_write;__wt_log_slot_switch;__log_slot_switch_internal;__wt_log_release;__log_fs_write;pwrite64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_pwrite64;vfs_write;ext4_file_write_iter;ext4_buffered_write_iter;generic_perform_write;ext4_da_write_begin;ext4_block_write_begin;create_empty_buffers;folio_create_empty_buffers;folio_alloc_buffers;alloc_buffer_head;kmem_cache_alloc;__cond_resched;finish_task_switch.isra.0 23
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_scheduleIteration();mongo::OperationContext::~OperationContext();mongo::OperationContext::~OperationContext();__GI___lll_lock_wait;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 23
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::Client::makeOperationContext();__GI___lll_lock_wait;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 23
mongod;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 23
FlowCon.fresher;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::PeriodicRunnerImpl::PeriodicJobImpl::_run()::{lambda()#2}, , 0>(mongo::PeriodicRunnerImpl::PeriodicJobImpl::_run()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::PeriodicRunnerImpl::PeriodicJobImpl::_run()::{lambda()#2}, , 0>(mongo::PeriodicRunnerImpl::PeriodicJobImpl::_run()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*);std::cv_status mongo::Waitable::wait_until<mongo::BasicLockableAdapter>(mongo::Waitable*, mongo::ClockSource*, mongo::stdx::condition_variable&, mongo::BasicLockableAdapter&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&);-;asm_exc_page_fault;exc_page_fault;do_user_addr_fault;handle_mm_fault;__handle_mm_fault;handle_pte_fault;do_swap_page;migration_entry_wait;migration_entry_wait_on_locked;io_schedule;schedule;finish_task_switch.isra.0 23
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#3}::operator()() const;mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections);mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections, bool);void std::vector<mongo::CollectionNamespaceOrUUIDLock, std::allocator<mongo::CollectionNamespaceOrUUIDLock> >::_M_realloc_insert<mongo::OperationContext*&, mongo::NamespaceStringOrUUID const&, mongo::LockMode&, mongo::Date_t&>(__gnu_cxx::__normal_iterator<mongo::CollectionNamespaceOrUUIDLock*, std::vector<mongo::CollectionNamespaceOrUUIDLock, std::allocator<mongo::CollectionNamespaceOrUUIDLock> > >, mongo::OperationContext*&, mongo::NamespaceStringOrUUID const&, mongo::LockMode&, mongo::Date_t&);mongo::CollectionNamespaceOrUUIDLock::CollectionNamespaceOrUUIDLock(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::Date_t)::{lambda()#1}::operator()() const;mongo::LockerImpl::lock(mongo::OperationContext*, mongo::ResourceId, mongo::LockMode, mongo::Date_t);mongo::FastMapNoAlloc<mongo::ResourceId, mongo::LockRequest>::IteratorImpl<mongo::FastMapNoAlloc<mongo::ResourceId, mongo::LockRequest>, mongo::LockRequest, std::_Deque_iterator<mongo::FastMapNoAlloc<mongo::ResourceId, mongo::LockRequest>::PreallocEntry, mongo::FastMapNoAlloc<mongo::ResourceId, mongo::LockRequest>::PreallocEntry&, mongo::FastMapNoAlloc<mongo::ResourceId, mongo::LockRequest>::PreallocEntry*> >::IteratorImpl(mongo::FastMapNoAlloc<mongo::ResourceId, mongo::LockRequest>&, mongo::ResourceId const&);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 23
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::IndexCatalogImpl::indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexFilteredRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::SortedDataIndexAccessMethod::insert(mongo::OperationContext*, mongo::SharedBufferFragmentBuilder&, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::_indexKeysOrWriteToSideTable(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::BSONObj const&, mongo::InsertDeleteOptions const&, long*);boost::container::vec_iterator<mongo::KeyString::Value*, false> boost::movelib::inplace_set_unique_difference<boost::container::vec_iterator<mongo::KeyString::Value*, false>, boost::container::vec_iterator<mongo::KeyString::Value*, false>, boost::container::dtl::flat_tree_value_compare<std::less<mongo::KeyString::Value>, mongo::KeyString::Value, boost::move_detail::identity<mongo::KeyString::Value> > >(boost::container::vec_iterator<mongo::KeyString::Value*, false>, boost::container::vec_iterator<mongo::KeyString::Value*, false>, boost::container::vec_iterator<mongo::KeyString::Value*, false>, boost::container::vec_iterator<mongo::KeyString::Value*, false>, boost::container::dtl::flat_tree_value_compare<std::less<mongo::KeyString::Value>, mongo::KeyString::Value, boost::move_detail::identity<mongo::KeyString::Value> >);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 23
ftdc;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FTDCController::start()::{lambda()#2}, , 0>(mongo::FTDCController::start()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FTDCController::start()::{lambda()#2}, , 0>(mongo::FTDCController::start()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::FTDCController::doLoop();mongo::FTDCCollectorCollection::collect(mongo::Client*);mongo::FTDCServerStatusCommandCollector::collect(mongo::OperationContext*, mongo::BSONObjBuilder&);mongo::CommandHelpers::runCommandDirectly(mongo::OperationContext*, mongo::OpMsgRequest const&);mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdServerStatus::run(mongo::OperationContext*, mongo::DatabaseName const&, mongo::BSONObj const&, mongo::BSONObjBuilder&);mongo::ServerStatusSection::appendSection(mongo::OperationContext*, mongo::BSONElement const&, mongo::BSONObjBuilder*) const;mongo::(anonymous namespace)::TCMallocServerStatusSection::generateSection(mongo::OperationContext*, mongo::BSONElement const&) const;mongo::(anonymous namespace)::TCMallocServerStatusSection::appendNumericPropertyIfAvailable(mongo::BSONObjBuilder&, mongo::StringData, char const*);TCMallocImplementation::GetNumericProperty(char const*, unsigned long*);ExtractStats(TCMallocStats*, unsigned long*, tcmalloc::PageHeap::SmallSpanStats*, tcmalloc::PageHeap::LargeSpanStats*) [clone .constprop.0];tcmalloc::CentralFreeList::tc_length();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 24
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::rpc::opMsgRequestFromAnyProtocol(mongo::Message const&, mongo::Client*);mongo::OpMsg::parse(mongo::Message const&, mongo::Client*);__memcmp_evex_movbe;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 24
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::RecordStore::insertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::doInsertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::_insertRecords(mongo::OperationContext*, mongo::Record*, mongo::Timestamp const*, unsigned long);mongo::WiredTigerCursor::WiredTigerCursor(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, bool, mongo::OperationContext*);mongo::WiredTigerRecoveryUnit::getSession();mongo::WiredTigerRecoveryUnit::_txnOpen();mongo::WiredTigerBeginTxnBlock::WiredTigerBeginTxnBlock(__wt_session*, mongo::PrepareConflictBehavior, mongo::WiredTigerBeginTxnBlock::RoundUpPreparedTimestamps, mongo::WiredTigerBeginTxnBlock::RoundUpReadTimestamp, mongo::RecoveryUnit::UntimestampedWriteAssertionLevel);__session_begin_transaction;__wt_txn_config;__wt_config_gets_def;__wt_config_getones;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 24
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::transport::SessionWorkflow::Impl::_getNextWork();mongo::transport::SessionWorkflow::Impl::_receiveRequest();mongo::transport::CommonAsioSession::sourceMessage();mongo::future_details::FutureImpl<mongo::Message>::ResetOnMoveOptional::_stealBase();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 24
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::OpObserverRegistry::onInserts(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, std::vector<bool, std::allocator<bool> >, bool);mongo::UserWriteBlockModeOpObserver::onInserts(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, std::vector<bool, std::allocator<bool> >, bool);mongo::repl::ReplicationCoordinator::get(mongo::OperationContext*);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 24
ftdc;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FTDCController::start()::{lambda()#2}, , 0>(mongo::FTDCController::start()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FTDCController::start()::{lambda()#2}, , 0>(mongo::FTDCController::start()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::FTDCController::doLoop();mongo::FTDCCollectorCollection::collect(mongo::Client*);mongo::FTDCServerStatusCommandCollector::collect(mongo::OperationContext*, mongo::BSONObjBuilder&);mongo::CommandHelpers::runCommandDirectly(mongo::OperationContext*, mongo::OpMsgRequest const&);mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdServerStatus::run(mongo::OperationContext*, mongo::DatabaseName const&, mongo::BSONObj const&, mongo::BSONObjBuilder&);mongo::ServerStatusSection::appendSection(mongo::OperationContext*, mongo::BSONElement const&, mongo::BSONObjBuilder*) const;mongo::(anonymous namespace)::TCMallocServerStatusSection::generateSection(mongo::OperationContext*, mongo::BSONElement const&) const;mongo::(anonymous namespace)::TCMallocServerStatusSection::appendNumericPropertyIfAvailable(mongo::BSONObjBuilder&, mongo::StringData, char const*);TCMallocImplementation::GetNumericProperty(char const*, unsigned long*);ExtractStats(TCMallocStats*, unsigned long*, tcmalloc::PageHeap::SmallSpanStats*, tcmalloc::PageHeap::LargeSpanStats*) [clone .constprop.0];tcmalloc::CentralFreeList::tc_length();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 24
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_setup();mongo::extractWriteConcern(mongo::OperationContext*, mongo::BSONObj const&, bool);mongo::WriteConcernOptions::extractWCFromCommand(mongo::BSONObj const&);mongo::BSONObj::getField(mongo::StringData) const;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 24
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 24
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#3}::operator()() const;mongo::write_ops_exec::assertCanWrite_inlock(mongo::OperationContext*, mongo::NamespaceString const&);mongo::CollectionShardingState::ScopedCollectionShardingState::acquireScopedCollectionShardingState(mongo::OperationContext*, mongo::NamespaceString const&, mongo::LockMode);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 24
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::IndexCatalogImpl::indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexFilteredRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::SortedDataIndexAccessMethod::insert(mongo::OperationContext*, mongo::SharedBufferFragmentBuilder&, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::getKeys(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, mongo::SharedBufferFragmentBuilder&, mongo::BSONObj const&, mongo::InsertDeleteOptions::ConstraintEnforcementMode, mongo::SortedDataIndexAccessMethod::GetKeysContext, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void>*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void>*, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void>*, boost::optional<mongo::RecordId> const&, std::function<void (mongo::OperationContext*, mongo::IndexCatalogEntry const*, mongo::Status, mongo::BSONObj const&, boost::optional<mongo::RecordId> const&)> const&, std::function<bool (mongo::OperationContext*, mongo::CollectionPtr const&)> const&) const;mongo::BtreeKeyGenerator::getKeys(mongo::SharedBufferFragmentBuilder&, mongo::BSONObj const&, bool, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void>*, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void>*, mongo::CollatorInterface const*, boost::optional<mongo::RecordId> const&) const;mongo::KeyString::BuilderBase<mongo::KeyString::PooledBuilder>::appendBSONElement(mongo::BSONElement const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (mongo::StringData)> const&);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 24
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::BackgroundThreadClockSource::now();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 24
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::rpc::opMsgRequestFromAnyProtocol(mongo::Message const&, mongo::Client*);mongo::OpMsg::parse(mongo::Message const&, mongo::Client*);mongo::Validated<mongo::BSONObj> mongo::BufReader::read<mongo::Validated<mongo::BSONObj> >();mongo::Validator<mongo::BSONObj>::validateLoad(char const*, unsigned long);mongo::BSONDepth::getMaxAllowableDepth();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 24
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#3}::operator()() const;mongo::CollectionCatalog::get(mongo::OperationContext*);pthread_mutex_lock;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 24
mongod;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 25
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_initiateCommand();mongo::CommandHelpers::auditLogAuthEvent(mongo::OperationContext*, mongo::CommandInvocation const*, mongo::OpMsgRequest const&, mongo::ErrorCodes::Error);std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 25
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::RecordStore::insertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::doInsertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::_insertRecords(mongo::OperationContext*, mongo::Record*, mongo::Timestamp const*, unsigned long);mongo::WiredTigerCursor::WiredTigerCursor(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, bool, mongo::OperationContext*);mongo::WiredTigerRecoveryUnit::getSession();mongo::WiredTigerRecoveryUnit::_txnOpen();mongo::WiredTigerBeginTxnBlock::WiredTigerBeginTxnBlock(__wt_session*, mongo::PrepareConflictBehavior, mongo::WiredTigerBeginTxnBlock::RoundUpPreparedTimestamps, mongo::WiredTigerBeginTxnBlock::RoundUpReadTimestamp, mongo::RecoveryUnit::UntimestampedWriteAssertionLevel);__session_begin_transaction;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 25
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::tenant_migration_access_blocker::checkIfCanReadOrBlock(mongo::OperationContext*, mongo::DatabaseName const&, mongo::OpMsgRequest const&);pthread_mutex_lock;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 25
JournalFlusher;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::BackgroundJob::jobBody();mongo::JournalFlusher::run();mongo::WiredTigerRecoveryUnit::waitUntilDurable(mongo::OperationContext*);mongo::WiredTigerSessionCache::waitUntilDurable(mongo::OperationContext*, mongo::WiredTigerSessionCache::Fsync, mongo::WiredTigerSessionCache::UseJournalListener);__session_log_flush;__wt_log_flush;__wt_log_force_sync;__log_fsync_file;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;file_write_and_wait_range;__filemap_fdatawrite_range;filemap_fdatawrite_wbc;do_writepages;ext4_writepages;ext4_do_writepages;mpage_prepare_extent_to_map;__cond_resched;finish_task_switch.isra.0 25
mongod;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 25
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::transport::SessionWorkflow::Impl::_getNextWork();mongo::transport::SessionWorkflow::Impl::_receiveRequest();mongo::transport::CommonAsioSession::sourceMessage();mongo::future_details::FutureImpl<mongo::Message>::ResetOnMoveOptional::_stealBase();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 25
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::Client::makeOperationContext();mongo::ServiceContext::makeOperationContext(mongo::Client*);void mongo::DecorationRegistry<mongo::OperationContext>::constructAt<boost::optional<mongo::repl::DocumentKey> >(void*);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 26
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_scheduleIteration();mongo::OperationContext::~OperationContext();mongo::OperationContext::~OperationContext();operator delete(void*, unsigned long);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 26
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::RecordStore::insertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::doInsertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::_insertRecords(mongo::OperationContext*, mongo::Record*, mongo::Timestamp const*, unsigned long);mongo::wiredTigerCursorInsert(mongo::OperationContext*, __wt_cursor*);__curfile_insert;__wt_btcur_insert;__wt_cursor_func_init.constprop.0;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 26
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::transport::SessionWorkflow::Impl::_getNextWork();mongo::transport::SessionWorkflow::Impl::_receiveRequest();mongo::transport::CommonAsioSession::sourceMessage();mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&);mongo::Future<void> mongo::transport::CommonAsioSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&);mongo::Future<void> mongo::transport::CommonAsioSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&);asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&);recvmsg;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_recvmsg;__sys_recvmsg;___sys_recvmsg;____sys_recvmsg;sock_recvmsg;security_socket_recvmsg;apparmor_socket_recvmsg;aa_sk_perm;__cond_resched;finish_task_switch.isra.0 26
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::IndexCatalogImpl::indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexFilteredRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::SortedDataIndexAccessMethod::insert(mongo::OperationContext*, mongo::SharedBufferFragmentBuilder&, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::_indexKeysOrWriteToSideTable(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::BSONObj const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::insertKeysAndUpdateMultikeyPaths(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::SortedDataIndexAccessMethod::insertKeys(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::WiredTigerIndex::insert(mongo::OperationContext*, mongo::KeyString::Value const&, bool, mongo::IncludeDuplicateRecordId);mongo::WiredTigerIdIndex::_insert(mongo::OperationContext*, __wt_cursor*, mongo::KeyString::Value const&, bool, mongo::IncludeDuplicateRecordId);mongo::wiredTigerCursorInsert(mongo::OperationContext*, __wt_cursor*);__curfile_insert;__wt_btcur_insert;__wt_row_search;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 27
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::transport::SessionWorkflow::Impl::_getNextWork();mongo::transport::SessionWorkflow::Impl::_receiveRequest();mongo::transport::CommonAsioSession::sourceMessage();mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&);mongo::Future<void> mongo::transport::CommonAsioSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&);mongo::Future<void> mongo::transport::CommonAsioSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&);asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&);recvmsg;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 27
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::CollectionCatalog::get(mongo::OperationContext*);pthread_mutex_lock;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 28
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::CollectionImpl::isCapped() const;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 28
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::transport::SessionWorkflow::Impl::_getNextWork();mongo::transport::SessionWorkflow::Impl::_receiveRequest();mongo::transport::CommonAsioSession::sourceMessage();mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)::{lambda()#1}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .constprop.0] [clone .isra.0];mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)::{lambda()#1}::operator()();mongo::Future<void> mongo::transport::CommonAsioSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&);mongo::Future<void> mongo::transport::CommonAsioSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&);asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&);recvmsg;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 28
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::IndexCatalogImpl::indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexFilteredRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::SortedDataIndexAccessMethod::insert(mongo::OperationContext*, mongo::SharedBufferFragmentBuilder&, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::_indexKeysOrWriteToSideTable(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::BSONObj const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::insertKeysAndUpdateMultikeyPaths(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::SortedDataIndexAccessMethod::insertKeys(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::WiredTigerIndex::insert(mongo::OperationContext*, mongo::KeyString::Value const&, bool, mongo::IncludeDuplicateRecordId);mongo::WiredTigerIdIndex::_insert(mongo::OperationContext*, __wt_cursor*, mongo::KeyString::Value const&, bool, mongo::IncludeDuplicateRecordId);mongo::wiredTigerCursorInsert(mongo::OperationContext*, __wt_cursor*);__curfile_insert;__wt_btcur_insert;__wt_row_modify;__wt_txn_log_op;__wt_logop_row_put_pack;__wt_struct_size;__pack_next.part.0;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 28
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::transport::SessionWorkflow::Impl::_getNextWork();mongo::transport::SessionWorkflow::Impl::_receiveRequest();mongo::transport::CommonAsioSession::sourceMessage();free;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 28
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 28
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::WriteUnitOfWork::commit();mongo::RecoveryUnit::commitUnitOfWork();mongo::WiredTigerRecoveryUnit::_commit();mongo::WiredTigerRecoveryUnit::_txnClose(bool);__session_commit_transaction;__wt_txn_commit;__wt_log_write;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 29
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_scheduleIteration();mongo::OperationContext::~OperationContext();mongo::OperationContext::~OperationContext();std::vector<mongo::repl::ReplOperation, std::allocator<mongo::repl::ReplOperation> >::~vector();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 30
mongod;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 30
Checkpointer;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::BackgroundJob::jobBody();mongo::Checkpointer::run();mongo::WiredTigerKVEngine::checkpoint(mongo::OperationContext*);mongo::WiredTigerKVEngine::_checkpoint(mongo::OperationContext*, __wt_session*);mongo::WiredTigerKVEngine::_checkpoint(__wt_session*, bool);__session_checkpoint.cold;__wt_txn_checkpoint;__txn_checkpoint_wrapper;__wt_txn_checkpoint_log;__wt_log_write;__wt_log_release;__log_fsync_file;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;file_write_and_wait_range;__filemap_fdatawait_range;folio_wait_writeback;folio_wait_bit;folio_wait_bit_common;io_schedule;schedule;finish_task_switch.isra.0 33
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::IndexCatalogImpl::indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexFilteredRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::SortedDataIndexAccessMethod::insert(mongo::OperationContext*, mongo::SharedBufferFragmentBuilder&, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::_indexKeysOrWriteToSideTable(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::BSONObj const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::insertKeysAndUpdateMultikeyPaths(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::SortedDataIndexAccessMethod::insertKeys(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::WiredTigerIndex::insert(mongo::OperationContext*, mongo::KeyString::Value const&, bool, mongo::IncludeDuplicateRecordId);mongo::WiredTigerIdIndex::_insert(mongo::OperationContext*, __wt_cursor*, mongo::KeyString::Value const&, bool, mongo::IncludeDuplicateRecordId);__wt_cursor_set_key;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 33
Checkpointer;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::BackgroundJob::jobBody();mongo::Checkpointer::run();mongo::WiredTigerKVEngine::checkpoint(mongo::OperationContext*);mongo::WiredTigerKVEngine::_checkpoint(mongo::OperationContext*, __wt_session*);mongo::WiredTigerKVEngine::_checkpoint(__wt_session*, bool);__session_checkpoint.cold;__wt_txn_checkpoint;__txn_checkpoint_wrapper;__wt_checkpoint;__checkpoint_tree;__wt_meta_ckptlist_set;__ckpt_set;__wt_metadata_update;__wt_turtle_update;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;file_write_and_wait_range;__filemap_fdatawait_range;folio_wait_writeback;folio_wait_bit;folio_wait_bit_common;io_schedule;schedule;finish_task_switch.isra.0 35
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_scheduleIteration();mongo::OperationContext::~OperationContext();void mongo::DecorationRegistry<mongo::OperationContext>::destroyAt<std::unique_ptr<mongo::JsExecution, std::default_delete<mongo::JsExecution> > >(void*);-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 35
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_initiateCommand();-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 36
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::RecordStore::insertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::doInsertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::_insertRecords(mongo::OperationContext*, mongo::Record*, mongo::Timestamp const*, unsigned long);mongo::wiredTigerCursorInsert(mongo::OperationContext*, __wt_cursor*);__curfile_insert;__wt_btcur_insert;__wt_row_modify;__wt_txn_log_op;__txn_logrec_init;__wt_struct_pack;__pack_next.part.0;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 38
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#3}::operator()() const;mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections);mongo::AutoGetCollection::AutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections, bool);mongo::AutoGetDb::createForAutoGetCollection(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, mongo::LockMode, mongo::auto_get_collection::OptionsWithSecondaryCollections const&);mongo::AutoGetDb::AutoGetDb(mongo::OperationContext*, mongo::DatabaseName const&, mongo::LockMode, mongo::Date_t, mongo::Lock::GlobalLockSkipOptions);mongo::Lock::DBLock::DBLock(mongo::OperationContext*, mongo::DatabaseName const&, mongo::LockMode, mongo::Date_t, mongo::Lock::GlobalLockSkipOptions);mongo::Lock::GlobalLock::GlobalLock(mongo::OperationContext*, mongo::LockMode, mongo::Date_t, mongo::Lock::InterruptBehavior, mongo::Lock::GlobalLockSkipOptions);mongo::Lock::GlobalLock::_takeGlobalAndRSTLLocks(mongo::LockMode, mongo::Date_t);mongo::LockerImpl::lockGlobal(mongo::OperationContext*, mongo::LockMode, mongo::Date_t);mongo::LockerImpl::_acquireTicket(mongo::OperationContext*, mongo::LockMode, mongo::Date_t);mongo::TicketHolder::waitForTicketUntil(mongo::OperationContext*, mongo::AdmissionContext*, mongo::Date_t);mongo::TicketHolder::tryAcquire(mongo::AdmissionContext*);sem_trywait;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 39
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::RecordStore::insertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::doInsertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::_insertRecords(mongo::OperationContext*, mongo::Record*, mongo::Timestamp const*, unsigned long);mongo::WiredTigerCursor::WiredTigerCursor(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, bool, mongo::OperationContext*);mongo::WiredTigerRecoveryUnit::getSession();mongo::WiredTigerRecoveryUnit::_txnOpen();mongo::WiredTigerBeginTxnBlock::WiredTigerBeginTxnBlock(__wt_session*, mongo::PrepareConflictBehavior, mongo::WiredTigerBeginTxnBlock::RoundUpPreparedTimestamps, mongo::WiredTigerBeginTxnBlock::RoundUpReadTimestamp, mongo::RecoveryUnit::UntimestampedWriteAssertionLevel);__session_begin_transaction;__wt_session_gen_leave;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 40
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_scheduleIteration();mongo::OperationContext::~OperationContext();mongo::OperationContext::~OperationContext();mongo::WiredTigerRecoveryUnit::~WiredTigerRecoveryUnit();mongo::WiredTigerRecoveryUnit::~WiredTigerRecoveryUnit();mongo::WiredTigerSessionCache::releaseSession(mongo::WiredTigerSession*);__session_reset;__wt_session_cursor_cache_sweep.part.0;clock_gettime;[unknown];-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 43
Checkpointer;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::BackgroundJob::jobBody();mongo::Checkpointer::run();mongo::WiredTigerKVEngine::checkpoint(mongo::OperationContext*);mongo::WiredTigerKVEngine::_checkpoint(mongo::OperationContext*, __wt_session*);mongo::WiredTigerKVEngine::_checkpoint(__wt_session*, bool);__session_checkpoint.cold;__wt_txn_checkpoint;__txn_checkpoint_wrapper;__wt_checkpoint;__checkpoint_tree;__bm_sync;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;file_write_and_wait_range;__filemap_fdatawait_range;folio_wait_writeback;folio_wait_bit;folio_wait_bit_common;io_schedule;schedule;finish_task_switch.isra.0 43
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#3}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::makeCollection(mongo::OperationContext*, mongo::NamespaceString const&);mongo::write_ops_exec::(anonymous namespace)::makeCollection(mongo::OperationContext*, mongo::NamespaceString const&)::{lambda()#1}::operator()() const;mongo::DatabaseImpl::userCreateNS(mongo::OperationContext*, mongo::NamespaceString const&, mongo::CollectionOptions, bool, mongo::BSONObj const&, bool) const;mongo::DatabaseImpl::_createCollection(mongo::OperationContext*, mongo::NamespaceString const&, mongo::CollectionOptions const&, bool, mongo::BSONObj const&, bool, boost::optional<mongo::VirtualCollectionOptions> const&) const;mongo::IndexCatalogImpl::createIndexOnEmptyCollection(mongo::OperationContext*, mongo::Collection*, mongo::BSONObj);mongo::IndexBuildBlock::init(mongo::OperationContext*, mongo::Collection*, bool);mongo::CollectionImpl::prepareForIndexBuild(mongo::OperationContext*, mongo::IndexDescriptor const*, boost::optional<mongo::UUID>, bool);mongo::DurableCatalogImpl::createIndex(mongo::OperationContext*, mongo::RecordId const&, mongo::NamespaceString const&, mongo::CollectionOptions const&, mongo::IndexDescriptor const*);mongo::WiredTigerKVEngine::createSortedDataInterface(mongo::OperationContext*, mongo::NamespaceString const&, mongo::CollectionOptions const&, mongo::StringData, mongo::IndexDescriptor const*);mongo::WiredTigerIndex::create(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&);__session_create;__wt_session_create;__wt_schema_create;__create_colgroup;__wt_schema_create;__wt_block_manager_create;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;file_write_and_wait_range;__filemap_fdatawait_range;folio_wait_writeback;folio_wait_bit;folio_wait_bit_common;io_schedule;schedule;finish_task_switch.isra.0 48
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::RecordStore::insertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::doInsertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::_insertRecords(mongo::OperationContext*, mongo::Record*, mongo::Timestamp const*, unsigned long);mongo::WiredTigerCursor::WiredTigerCursor(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, bool, mongo::OperationContext*);mongo::WiredTigerRecoveryUnit::getSession();mongo::WiredTigerRecoveryUnit::_txnOpen();mongo::WiredTigerBeginTxnBlock::WiredTigerBeginTxnBlock(__wt_session*, mongo::PrepareConflictBehavior, mongo::WiredTigerBeginTxnBlock::RoundUpPreparedTimestamps, mongo::WiredTigerBeginTxnBlock::RoundUpReadTimestamp, mongo::RecoveryUnit::UntimestampedWriteAssertionLevel);__session_begin_transaction;__txn_get_snapshot_int;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 51
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;-;asm_sysvec_apic_timer_interrupt;sysvec_apic_timer_interrupt;irqentry_exit;irqentry_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 52
mongod;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 53
Checkpointer;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::BackgroundJob::jobBody();mongo::Checkpointer::run();mongo::WiredTigerKVEngine::checkpoint(mongo::OperationContext*);mongo::WiredTigerKVEngine::_checkpoint(mongo::OperationContext*, __wt_session*);mongo::WiredTigerKVEngine::_checkpoint(__wt_session*, bool);__session_checkpoint.cold;__wt_txn_checkpoint;__txn_checkpoint_wrapper;__wt_txn_checkpoint_log;__wt_log_write;__wt_log_release;__log_fsync_file;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;ext4_fc_commit;jbd2_complete_transaction;jbd2_log_wait_commit;schedule;finish_task_switch.isra.0 53
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#3}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::makeCollection(mongo::OperationContext*, mongo::NamespaceString const&);mongo::write_ops_exec::(anonymous namespace)::makeCollection(mongo::OperationContext*, mongo::NamespaceString const&)::{lambda()#1}::operator()() const;mongo::DatabaseImpl::userCreateNS(mongo::OperationContext*, mongo::NamespaceString const&, mongo::CollectionOptions, bool, mongo::BSONObj const&, bool) const;mongo::DatabaseImpl::_createCollection(mongo::OperationContext*, mongo::NamespaceString const&, mongo::CollectionOptions const&, bool, mongo::BSONObj const&, bool, boost::optional<mongo::VirtualCollectionOptions> const&) const;mongo::IndexCatalogImpl::createIndexOnEmptyCollection(mongo::OperationContext*, mongo::Collection*, mongo::BSONObj);mongo::IndexBuildBlock::init(mongo::OperationContext*, mongo::Collection*, bool);mongo::CollectionImpl::prepareForIndexBuild(mongo::OperationContext*, mongo::IndexDescriptor const*, boost::optional<mongo::UUID>, bool);mongo::DurableCatalogImpl::createIndex(mongo::OperationContext*, mongo::RecordId const&, mongo::NamespaceString const&, mongo::CollectionOptions const&, mongo::IndexDescriptor const*);mongo::WiredTigerKVEngine::createSortedDataInterface(mongo::OperationContext*, mongo::NamespaceString const&, mongo::CollectionOptions const&, mongo::StringData, mongo::IndexDescriptor const*);mongo::WiredTigerIndex::create(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&);__session_create;__wt_session_create;__wt_schema_create;__wt_meta_track_off;__wt_txn_checkpoint_log;__wt_log_write;__wt_log_release;__log_fsync_file;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;file_write_and_wait_range;__filemap_fdatawait_range;folio_wait_writeback;folio_wait_bit;folio_wait_bit_common;io_schedule;schedule;finish_task_switch.isra.0 54
Checkpointer;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::BackgroundJob::jobBody();mongo::Checkpointer::run();mongo::WiredTigerKVEngine::checkpoint(mongo::OperationContext*);mongo::WiredTigerKVEngine::_checkpoint(mongo::OperationContext*, __wt_session*);mongo::WiredTigerKVEngine::_checkpoint(__wt_session*, bool);__session_checkpoint.cold;__wt_txn_checkpoint;__txn_checkpoint_wrapper;__wt_log_flush;__wt_log_force_sync;__log_fsync_file;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;ext4_fc_commit;jbd2_complete_transaction;jbd2_log_wait_commit;schedule;finish_task_switch.isra.0 54
Checkpointer;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::BackgroundJob::jobBody();mongo::Checkpointer::run();mongo::WiredTigerKVEngine::checkpoint(mongo::OperationContext*);mongo::WiredTigerKVEngine::_checkpoint(mongo::OperationContext*, __wt_session*);mongo::WiredTigerKVEngine::_checkpoint(__wt_session*, bool);__session_checkpoint.cold;__wt_txn_checkpoint;__txn_checkpoint_wrapper;__wt_checkpoint;__checkpoint_tree;__bm_sync;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;ext4_fc_commit;jbd2_complete_transaction;jbd2_log_wait_commit;schedule;finish_task_switch.isra.0 64
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#3}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::makeCollection(mongo::OperationContext*, mongo::NamespaceString const&);mongo::write_ops_exec::(anonymous namespace)::makeCollection(mongo::OperationContext*, mongo::NamespaceString const&)::{lambda()#1}::operator()() const;mongo::DatabaseImpl::userCreateNS(mongo::OperationContext*, mongo::NamespaceString const&, mongo::CollectionOptions, bool, mongo::BSONObj const&, bool) const;mongo::DatabaseImpl::_createCollection(mongo::OperationContext*, mongo::NamespaceString const&, mongo::CollectionOptions const&, bool, mongo::BSONObj const&, bool, boost::optional<mongo::VirtualCollectionOptions> const&) const;mongo::IndexCatalogImpl::createIndexOnEmptyCollection(mongo::OperationContext*, mongo::Collection*, mongo::BSONObj);mongo::IndexBuildBlock::init(mongo::OperationContext*, mongo::Collection*, bool);mongo::CollectionImpl::prepareForIndexBuild(mongo::OperationContext*, mongo::IndexDescriptor const*, boost::optional<mongo::UUID>, bool);mongo::DurableCatalogImpl::createIndex(mongo::OperationContext*, mongo::RecordId const&, mongo::NamespaceString const&, mongo::CollectionOptions const&, mongo::IndexDescriptor const*);mongo::WiredTigerKVEngine::createSortedDataInterface(mongo::OperationContext*, mongo::NamespaceString const&, mongo::CollectionOptions const&, mongo::StringData, mongo::IndexDescriptor const*);mongo::WiredTigerIndex::create(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&);__session_create;__wt_session_create;__wt_schema_create;__wt_meta_track_off;__wt_txn_checkpoint_log;__wt_log_write;__wt_log_release;__log_fsync_file;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;ext4_fc_commit;jbd2_complete_transaction;jbd2_log_wait_commit;schedule;finish_task_switch.isra.0 69
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<mongo::DbResponse>::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#2}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#2}&&) &&::{lambda(mongo::DbResponse&&)#1}::operator()(mongo::DbResponse&&) const [clone .isra.0];auto mongo::future_details::statusCall<mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#2}&, mongo::DbResponse>(mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#2}&, mongo::DbResponse&&);mongo::transport::SessionWorkflow::Impl::_acceptResponse(mongo::DbResponse);mongo::ServiceContext::killAndDelistOperation(mongo::OperationContext*, mongo::ErrorCodes::Error);mongo::ServiceContext::killOperation(mongo::WithLock, mongo::OperationContext*, mongo::ErrorCodes::Error);write;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;syscall_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 70
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::transport::SessionWorkflow::Impl::_getNextWork();mongo::transport::SessionWorkflow::Impl::_receiveRequest();mongo::transport::CommonAsioSession::sourceMessage();mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)::{lambda()#1}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .constprop.0] [clone .isra.0];mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)::{lambda()#1}::operator()();mongo::Future<void> mongo::transport::CommonAsioSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&);mongo::Future<void> mongo::transport::CommonAsioSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&);asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&);recvmsg;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;syscall_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 71
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::RecordStore::insertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::doInsertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::_insertRecords(mongo::OperationContext*, mongo::Record*, mongo::Timestamp const*, unsigned long);mongo::wiredTigerCursorInsert(mongo::OperationContext*, __wt_cursor*);__curfile_insert;__wt_btcur_insert;__wt_row_modify;__wt_calloc;calloc;tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long));tcmalloc::CentralFreeList::RemoveRange(void**, void**, int);tcmalloc::CentralFreeList::Populate();SpinLock::SlowLock();syscall;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 72
Checkpointer;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::BackgroundJob::jobBody();mongo::Checkpointer::run();mongo::WiredTigerKVEngine::checkpoint(mongo::OperationContext*);mongo::WiredTigerKVEngine::_checkpoint(mongo::OperationContext*, __wt_session*);mongo::WiredTigerKVEngine::_checkpoint(__wt_session*, bool);__session_checkpoint.cold;__wt_txn_checkpoint;__txn_checkpoint_wrapper;__wt_checkpoint;__checkpoint_tree;__wt_meta_ckptlist_set;__ckpt_set;__wt_metadata_update;__wt_turtle_update;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;ext4_fc_commit;jbd2_complete_transaction;jbd2_log_wait_commit;schedule;finish_task_switch.isra.0 73
mongod;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 76
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#3}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::makeCollection(mongo::OperationContext*, mongo::NamespaceString const&);mongo::write_ops_exec::(anonymous namespace)::makeCollection(mongo::OperationContext*, mongo::NamespaceString const&)::{lambda()#1}::operator()() const;mongo::DatabaseImpl::userCreateNS(mongo::OperationContext*, mongo::NamespaceString const&, mongo::CollectionOptions, bool, mongo::BSONObj const&, bool) const;mongo::DatabaseImpl::_createCollection(mongo::OperationContext*, mongo::NamespaceString const&, mongo::CollectionOptions const&, bool, mongo::BSONObj const&, bool, boost::optional<mongo::VirtualCollectionOptions> const&) const;mongo::IndexCatalogImpl::createIndexOnEmptyCollection(mongo::OperationContext*, mongo::Collection*, mongo::BSONObj);mongo::IndexBuildBlock::init(mongo::OperationContext*, mongo::Collection*, bool);mongo::CollectionImpl::prepareForIndexBuild(mongo::OperationContext*, mongo::IndexDescriptor const*, boost::optional<mongo::UUID>, bool);mongo::DurableCatalogImpl::createIndex(mongo::OperationContext*, mongo::RecordId const&, mongo::NamespaceString const&, mongo::CollectionOptions const&, mongo::IndexDescriptor const*);mongo::WiredTigerKVEngine::createSortedDataInterface(mongo::OperationContext*, mongo::NamespaceString const&, mongo::CollectionOptions const&, mongo::StringData, mongo::IndexDescriptor const*);mongo::WiredTigerIndex::create(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&);__session_create;__wt_session_create;__wt_schema_create;__create_colgroup;__wt_schema_create;__wt_block_manager_create;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;ext4_fc_commit;jbd2_complete_transaction;jbd2_log_wait_commit;schedule;finish_task_switch.isra.0 78
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#3}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::makeCollection(mongo::OperationContext*, mongo::NamespaceString const&);mongo::write_ops_exec::(anonymous namespace)::makeCollection(mongo::OperationContext*, mongo::NamespaceString const&)::{lambda()#1}::operator()() const;mongo::DatabaseImpl::userCreateNS(mongo::OperationContext*, mongo::NamespaceString const&, mongo::CollectionOptions, bool, mongo::BSONObj const&, bool) const;mongo::DatabaseImpl::_createCollection(mongo::OperationContext*, mongo::NamespaceString const&, mongo::CollectionOptions const&, bool, mongo::BSONObj const&, bool, boost::optional<mongo::VirtualCollectionOptions> const&) const;mongo::IndexCatalogImpl::createIndexOnEmptyCollection(mongo::OperationContext*, mongo::Collection*, mongo::BSONObj);mongo::IndexBuildBlock::init(mongo::OperationContext*, mongo::Collection*, bool);mongo::CollectionImpl::prepareForIndexBuild(mongo::OperationContext*, mongo::IndexDescriptor const*, boost::optional<mongo::UUID>, bool);mongo::DurableCatalogImpl::createIndex(mongo::OperationContext*, mongo::RecordId const&, mongo::NamespaceString const&, mongo::CollectionOptions const&, mongo::IndexDescriptor const*);mongo::WiredTigerKVEngine::createSortedDataInterface(mongo::OperationContext*, mongo::NamespaceString const&, mongo::CollectionOptions const&, mongo::StringData, mongo::IndexDescriptor const*);mongo::WiredTigerIndex::create(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&);__session_create;__wt_session_create;__wt_schema_create;__create_colgroup;__wt_schema_create;__wt_block_manager_create;__wt_open;__posix_open_file;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;ext4_force_commit;jbd2_journal_force_commit;__jbd2_journal_force_commit;jbd2_log_wait_commit;schedule;finish_task_switch.isra.0 80
Checkpointer;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::BackgroundJob::jobBody();mongo::Checkpointer::run();mongo::WiredTigerKVEngine::checkpoint(mongo::OperationContext*);mongo::WiredTigerKVEngine::_checkpoint(mongo::OperationContext*, __wt_session*);mongo::WiredTigerKVEngine::_checkpoint(__wt_session*, bool);__session_checkpoint.cold;__wt_txn_checkpoint;__txn_checkpoint_wrapper;__wt_checkpoint;__checkpoint_tree;__wt_meta_ckptlist_set;__ckpt_set;__wt_metadata_update;__wt_turtle_update;__posix_fs_rename;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;ext4_force_commit;jbd2_journal_force_commit;__jbd2_journal_force_commit;jbd2_log_wait_commit;schedule;finish_task_switch.isra.0 82
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#3}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::makeCollection(mongo::OperationContext*, mongo::NamespaceString const&);mongo::write_ops_exec::(anonymous namespace)::makeCollection(mongo::OperationContext*, mongo::NamespaceString const&)::{lambda()#1}::operator()() const;mongo::DatabaseImpl::userCreateNS(mongo::OperationContext*, mongo::NamespaceString const&, mongo::CollectionOptions, bool, mongo::BSONObj const&, bool) const;mongo::DatabaseImpl::_createCollection(mongo::OperationContext*, mongo::NamespaceString const&, mongo::CollectionOptions const&, bool, mongo::BSONObj const&, bool, boost::optional<mongo::VirtualCollectionOptions> const&) const;mongo::DurableCatalogImpl::createCollection(mongo::OperationContext*, mongo::NamespaceString const&, mongo::CollectionOptions const&, bool);mongo::WiredTigerKVEngine::createRecordStore(mongo::OperationContext*, mongo::NamespaceString const&, mongo::StringData, mongo::CollectionOptions const&, mongo::KeyFormat);__session_create;__wt_session_create;__wt_schema_create;__create_colgroup;__wt_schema_create;__wt_block_manager_create;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;file_write_and_wait_range;__filemap_fdatawait_range;folio_wait_writeback;folio_wait_bit;folio_wait_bit_common;io_schedule;schedule;finish_task_switch.isra.0 82
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#3}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::makeCollection(mongo::OperationContext*, mongo::NamespaceString const&);mongo::write_ops_exec::(anonymous namespace)::makeCollection(mongo::OperationContext*, mongo::NamespaceString const&)::{lambda()#1}::operator()() const;mongo::DatabaseImpl::userCreateNS(mongo::OperationContext*, mongo::NamespaceString const&, mongo::CollectionOptions, bool, mongo::BSONObj const&, bool) const;mongo::DatabaseImpl::_createCollection(mongo::OperationContext*, mongo::NamespaceString const&, mongo::CollectionOptions const&, bool, mongo::BSONObj const&, bool, boost::optional<mongo::VirtualCollectionOptions> const&) const;mongo::DurableCatalogImpl::createCollection(mongo::OperationContext*, mongo::NamespaceString const&, mongo::CollectionOptions const&, bool);mongo::WiredTigerKVEngine::createRecordStore(mongo::OperationContext*, mongo::NamespaceString const&, mongo::StringData, mongo::CollectionOptions const&, mongo::KeyFormat);__session_create;__wt_session_create;__wt_schema_create;__create_colgroup;__wt_schema_create;__wt_block_manager_create;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;ext4_fc_commit;jbd2_complete_transaction;jbd2_log_wait_commit;schedule;finish_task_switch.isra.0 83
Checkpointer;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::BackgroundJob::jobBody();mongo::Checkpointer::run();mongo::WiredTigerKVEngine::checkpoint(mongo::OperationContext*);mongo::WiredTigerKVEngine::_checkpoint(mongo::OperationContext*, __wt_session*);mongo::WiredTigerKVEngine::_checkpoint(__wt_session*, bool);__session_checkpoint.cold;__wt_txn_checkpoint;__txn_checkpoint_wrapper;__wt_txn_checkpoint_log;__wt_log_force_sync;__log_fsync_file;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;ext4_fc_commit;jbd2_complete_transaction;jbd2_log_wait_commit;schedule;finish_task_switch.isra.0 107
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#3}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::makeCollection(mongo::OperationContext*, mongo::NamespaceString const&);mongo::write_ops_exec::(anonymous namespace)::makeCollection(mongo::OperationContext*, mongo::NamespaceString const&)::{lambda()#1}::operator()() const;mongo::DatabaseImpl::userCreateNS(mongo::OperationContext*, mongo::NamespaceString const&, mongo::CollectionOptions, bool, mongo::BSONObj const&, bool) const;mongo::DatabaseImpl::_createCollection(mongo::OperationContext*, mongo::NamespaceString const&, mongo::CollectionOptions const&, bool, mongo::BSONObj const&, bool, boost::optional<mongo::VirtualCollectionOptions> const&) const;mongo::DurableCatalogImpl::createCollection(mongo::OperationContext*, mongo::NamespaceString const&, mongo::CollectionOptions const&, bool);mongo::WiredTigerKVEngine::createRecordStore(mongo::OperationContext*, mongo::NamespaceString const&, mongo::StringData, mongo::CollectionOptions const&, mongo::KeyFormat);__session_create;__wt_session_create;__wt_schema_create;__create_colgroup;__wt_schema_create;__wt_block_manager_create;__wt_open;__posix_open_file;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;ext4_force_commit;jbd2_journal_force_commit;__jbd2_journal_force_commit;jbd2_log_wait_commit;schedule;finish_task_switch.isra.0 117
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::transport::SessionWorkflow::Impl::_getNextWork();mongo::transport::SessionWorkflow::Impl::_receiveRequest();mongo::transport::CommonAsioSession::sourceMessage();mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&);mongo::Future<void> mongo::transport::CommonAsioSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&);mongo::Future<void> mongo::transport::CommonAsioSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&);asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&);recvmsg;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_recvmsg;__sys_recvmsg;___sys_recvmsg;____sys_recvmsg;sock_recvmsg;inet_recvmsg;tcp_recvmsg;tcp_recvmsg_locked;sk_wait_data;wait_woken;schedule_timeout;schedule;finish_task_switch.isra.0 122
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::transport::SessionWorkflow::Impl::_getNextWork();mongo::transport::SessionWorkflow::Impl::_receiveRequest();mongo::transport::CommonAsioSession::sourceMessage();mongo::transport::CommonAsioSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&);mongo::Future<void> mongo::transport::CommonAsioSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&);mongo::Future<void> mongo::transport::CommonAsioSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&);asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&);recvmsg;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;syscall_exit_to_user_mode;exit_to_user_mode_prepare;exit_to_user_mode_loop;schedule;finish_task_switch.isra.0 187
TTLMonitor;__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 270
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::Client::makeOperationContext();mongo::ServiceContext::makeOperationContext(mongo::Client*);__GI___lll_lock_wait;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 281
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::RecordStore::insertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::doInsertRecords(mongo::OperationContext*, std::vector<mongo::Record, std::allocator<mongo::Record> >*, std::vector<mongo::Timestamp, std::allocator<mongo::Timestamp> > const&);mongo::WiredTigerRecordStore::_insertRecords(mongo::OperationContext*, mongo::Record*, mongo::Timestamp const*, unsigned long);mongo::wiredTigerCursorInsert(mongo::OperationContext*, __wt_cursor*);__curfile_insert;__wt_btcur_insert;__GI___lll_lock_wait;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 296
mongod;start_thread;__log_server;__log_prealloc_once;__wt_log_allocfile;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;ext4_fc_commit;jbd2_complete_transaction;jbd2_log_wait_commit;schedule;finish_task_switch.isra.0 323
mongod;start_thread;__log_file_server;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;ext4_fc_commit;jbd2_complete_transaction;jbd2_log_wait_commit;schedule;finish_task_switch.isra.0 352
Checkpointer;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::BackgroundJob::jobBody();mongo::Checkpointer::run();mongo::WiredTigerKVEngine::checkpoint(mongo::OperationContext*);mongo::WiredTigerKVEngine::_checkpoint(mongo::OperationContext*, __wt_session*);mongo::WiredTigerKVEngine::_checkpoint(__wt_session*, bool);__session_checkpoint.cold;__wt_txn_checkpoint;__txn_checkpoint_wrapper;__wt_log_flush;__wt_log_force_sync;__log_fsync_file;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;file_write_and_wait_range;__filemap_fdatawait_range;folio_wait_writeback;folio_wait_bit;folio_wait_bit_common;io_schedule;schedule;finish_task_switch.isra.0 387
mongod;start_thread;__log_server;__log_prealloc_once;__wt_log_allocfile;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;file_write_and_wait_range;__filemap_fdatawait_range;folio_wait_writeback;folio_wait_bit;folio_wait_bit_common;io_schedule;schedule;finish_task_switch.isra.0 416
Checkpointer;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::BackgroundJob::jobBody();mongo::Checkpointer::run();mongo::WiredTigerKVEngine::checkpoint(mongo::OperationContext*);mongo::WiredTigerKVEngine::_checkpoint(mongo::OperationContext*, __wt_session*);mongo::WiredTigerKVEngine::_checkpoint(__wt_session*, bool);__session_checkpoint.cold;__wt_txn_checkpoint;__txn_checkpoint_wrapper;__wt_txn_checkpoint_log;__wt_log_force_sync;__log_fsync_file;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;file_write_and_wait_range;__filemap_fdatawait_range;folio_wait_writeback;folio_wait_bit;folio_wait_bit_common;io_schedule;schedule;finish_task_switch.isra.0 472
JournalFlusher;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::BackgroundJob::jobBody();mongo::JournalFlusher::run();mongo::WiredTigerRecoveryUnit::waitUntilDurable(mongo::OperationContext*);mongo::WiredTigerSessionCache::waitUntilDurable(mongo::OperationContext*, mongo::WiredTigerSessionCache::Fsync, mongo::WiredTigerSessionCache::UseJournalListener);__session_log_flush;__wt_log_flush;__wt_log_force_sync;__log_fsync_dir;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;ext4_force_commit;jbd2_journal_force_commit;__jbd2_journal_force_commit;jbd2_log_wait_commit;schedule;finish_task_switch.isra.0 515
mongod;start_thread;__log_server;__log_prealloc_once;__wt_log_allocfile;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;ext4_fc_commit;jbd2_complete_transaction;jbd2_log_wait_commit;schedule;finish_task_switch.isra.0 542
mongod;start_thread;__log_file_server;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;file_write_and_wait_range;__filemap_fdatawait_range;folio_wait_writeback;folio_wait_bit;folio_wait_bit_common;io_schedule;schedule;finish_task_switch.isra.0 549
JournalFlusher;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 570
JournalFlusher;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 651
Checkpointer;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::BackgroundJob::jobBody();mongo::Checkpointer::run();mongo::WiredTigerKVEngine::checkpoint(mongo::OperationContext*);mongo::WiredTigerKVEngine::_checkpoint(mongo::OperationContext*, __wt_session*);mongo::WiredTigerKVEngine::_checkpoint(__wt_session*, bool);__session_checkpoint.cold;__wt_txn_checkpoint;__txn_checkpoint_wrapper;__bm_sync;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;ext4_fc_commit;jbd2_complete_transaction;jbd2_log_wait_commit;schedule;finish_task_switch.isra.0 700
conn1;start_thread;mongo::transport::(anonymous namespace)::runFunc(void*);mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::SharedState::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#2}&&)::SpecificImpl::call();mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_captureContext(mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}>(mongo::transport::SessionWorkflow::Impl::_scheduleIteration()::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::SessionWorkflow::Impl::_doOneIteration();mongo::future_details::FutureImpl<std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> > >::then<mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}>(mongo::CleanupFuturePolicy<false>, mongo::transport::SessionWorkflow::Impl::_doOneIteration()::{lambda(auto:1)#1}&&) &&::{lambda(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&)#1}::operator()(std::unique_ptr<mongo::transport::SessionWorkflow::Impl::WorkItem, std::default_delete<mongo::transport::SessionWorkflow::Impl::WorkItem> >&&) const [clone .isra.0];mongo::transport::SessionWorkflow::Impl::_dispatchWork();mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&);mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >);mongo::(anonymous namespace)::CommandOpRunner::run();mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>);mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&;mongo::future_details::SharedStateBase::transitionToFinished();mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::CleanupFuturePolicy<false>, mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&);_ZN5mongo19makeReadyFutureWithIZNOS_11future_util10AsyncStateINS_12_GLOBAL__N_119ExecCommandDatabaseEE13thenWithStateIZZNS3_14executeCommandESt10shared_ptrINS3_13HandleRequest16ExecutionContextEEENUlvE0_clEvEUlPT_E_EEDaOSC_EUlvE_EENS_6FutureINS_14future_details17UnwrappedTypeImplINSt13invoke_resultISF_JEE4typeEE4typeEEESF_;mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec();mongo::(anonymous namespace)::RunCommandImpl::run();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl();mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint();mongo::(anonymous namespace)::RunCommandImpl::_runCommand();mongo::(anonymous namespace)::InvokeCommand::run();mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>);mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, bool);mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*);mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*);mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*);mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource);mongo::write_ops_exec::insertBatchAndHandleErrors(mongo::OperationContext*, mongo::NamespaceString const&, boost::optional<mongo::UUID> const&, bool, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> >&, mongo::write_ops_exec::LastOpFixer*, mongo::write_ops_exec::WriteResult*, mongo::OperationSource)::{lambda()#4}::operator()() const;mongo::write_ops_exec::(anonymous namespace)::insertDocumentsAtomically(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool);mongo::collection_internal::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool);mongo::IndexCatalogImpl::indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::IndexCatalogImpl::_indexFilteredRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const;mongo::SortedDataIndexAccessMethod::insert(mongo::OperationContext*, mongo::SharedBufferFragmentBuilder&, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::_indexKeysOrWriteToSideTable(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::BSONObj const&, mongo::InsertDeleteOptions const&, long*);mongo::SortedDataIndexAccessMethod::insertKeysAndUpdateMultikeyPaths(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::SortedDataIndexAccessMethod::insertKeys(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*, mongo::IncludeDuplicateRecordId);mongo::WiredTigerIndex::insert(mongo::OperationContext*, mongo::KeyString::Value const&, bool, mongo::IncludeDuplicateRecordId);mongo::WiredTigerIdIndex::_insert(mongo::OperationContext*, __wt_cursor*, mongo::KeyString::Value const&, bool, mongo::IncludeDuplicateRecordId);mongo::wiredTigerCursorInsert(mongo::OperationContext*, __wt_cursor*);__curfile_insert;__wt_btcur_insert;__GI___lll_lock_wait;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 1093
JournalFlusher;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 1203
Checkpointer;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::BackgroundJob::jobBody();mongo::Checkpointer::run();mongo::WiredTigerKVEngine::checkpoint(mongo::OperationContext*);mongo::WiredTigerKVEngine::_checkpoint(mongo::OperationContext*, __wt_session*);mongo::WiredTigerKVEngine::_checkpoint(__wt_session*, bool);__session_checkpoint.cold;__wt_txn_checkpoint;__txn_checkpoint_wrapper;__bm_sync;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;file_write_and_wait_range;__filemap_fdatawait_range;folio_wait_writeback;folio_wait_bit;folio_wait_bit_common;io_schedule;schedule;finish_task_switch.isra.0 3879
Service.Fixed-0;epoll_wait;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_epoll_wait;do_epoll_wait;ep_poll;schedule_hrtimeout_range;schedule_hrtimeout_range_clock;schedule;finish_task_switch.isra.0 6582
mongod;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 6988
JournalFlusher;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::BackgroundJob::jobBody();mongo::JournalFlusher::run();mongo::WiredTigerRecoveryUnit::waitUntilDurable(mongo::OperationContext*);mongo::WiredTigerSessionCache::waitUntilDurable(mongo::OperationContext*, mongo::WiredTigerSessionCache::Fsync, mongo::WiredTigerSessionCache::UseJournalListener);__session_log_flush;__wt_log_flush;__wt_log_force_sync;__log_fsync_file;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;ext4_fc_commit;jbd2_complete_transaction;jbd2_log_wait_commit;schedule;finish_task_switch.isra.0 13794
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 19869
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 20967
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 21963
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 21963
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 21963
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 21964
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 21964
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 21964
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 21964
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 21964
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 21965
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 21965
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 21965
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 21966
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 21966
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 21966
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 21967
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 21968
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 21968
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 21968
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 21970
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 22965
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 22966
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 22967
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 22967
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 22967
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 22967
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 22967
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 23964
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 23966
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 23967
Service.Fixed-0;execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::ThreadPool::Impl::_startWorkerThread_inlock()::{lambda()#4}, , 0>(mongo::ThreadPool::Impl::_startWorkerThread_inlock()::{lambda()#4})::{lambda()#1}> > >::_M_run();mongo::ThreadPool::Impl::_workerThreadBody(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&);mongo::ThreadPool::Impl::_consumeTasks();mongo::ThreadPool::Impl::_doOneTask(std::unique_lock<std::mutex>*);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorFixed::start()::{lambda(mongo::Status)#2}>(mongo::transport::ServiceExecutorFixed::start()::{lambda(mongo::Status)#2}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::AsioReactor::run();asio::io_context::run();asio::detail::scheduler::run(std::error_code&);asio::detail::scheduler::do_run_one(asio::detail::conditionally_enabled_mutex::scoped_lock&, asio::detail::scheduler_thread_info&, std::error_code const&);epoll_wait;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_epoll_wait;do_epoll_wait;ep_poll;schedule_hrtimeout_range;schedule_hrtimeout_range_clock;schedule;finish_task_switch.isra.0 37316
JournalFlusher;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::BackgroundJob::jobBody();mongo::JournalFlusher::run();mongo::WiredTigerRecoveryUnit::waitUntilDurable(mongo::OperationContext*);mongo::WiredTigerSessionCache::waitUntilDurable(mongo::OperationContext*, mongo::WiredTigerSessionCache::Fsync, mongo::WiredTigerSessionCache::UseJournalListener);__session_log_flush;__wt_log_flush;__wt_log_force_sync;__log_fsync_file;__GI_fdatasync;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_fdatasync;ext4_sync_file;file_write_and_wait_range;__filemap_fdatawait_range;folio_wait_writeback;folio_wait_bit;folio_wait_bit_common;io_schedule;schedule;finish_task_switch.isra.0 60134
mongod;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 106026
mongod;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 106038
mongod;__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 200115
mongod;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 205039
mongod;__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 300335
mongod;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 327364
mongod;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 337188
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 430964
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 431964
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 431968
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 544963
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 545964
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 546961
mongod;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 733304
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 841957
TicketH.Monitor;__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 899895
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 975959
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 975961
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 975961
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 976960
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 976961
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 976961
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 976962
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 976967
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 977955
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 977959
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 977961
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 977962
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 977963
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 977963
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 977964
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 977965
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 977966
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 977966
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 977966
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 977967
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 977967
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 977968
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 978955
mongod;__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 1000047
mongod;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 1030308
ftdc;[unknown];__statfs;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_statfs;__do_sys_statfs;user_statfs;statfs_by_dentry;efivarfs_statfs;efivar_query_variable_info;virt_efi_query_variable_info;wait_for_completion;schedule_timeout;schedule;finish_task_switch.isra.0 1777789
Backgro.kSource;[Missed User Stack];entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 1955929
JournalFlusher;__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 1999084
clientcursormon;__clock_nanosleep;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_clock_nanosleep;common_nsleep;hrtimer_nanosleep;do_nanosleep;schedule;finish_task_switch.isra.0 8000112
Timesta.Monitor;__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 8999618
FlowCon.fresher;__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 8999841
mongod;[Missed User Stack];entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 15657250
mongod;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 18046475
mongod;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 18529189
mongod;__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 30000176
mongod;__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 37521422
mongod;__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 43012194
mongod;__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 43012374
mongod;__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 43012392
mongod;__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 43012427
mongod;__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 44176982
mongod;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 44814195
mongod;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 44899958
mongod;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 45012283
mongod;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 45210548
mongod;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 45517525
mongod;__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 50000284
Service.Fixed-0;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::ThreadPool::Impl::_startWorkerThread_inlock()::{lambda()#4}, , 0>(mongo::ThreadPool::Impl::_startWorkerThread_inlock()::{lambda()#4})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::ThreadPool::Impl::_startWorkerThread_inlock()::{lambda()#4}, , 0>(mongo::ThreadPool::Impl::_startWorkerThread_inlock()::{lambda()#4})::{lambda()#1}> > >::_M_run();mongo::ThreadPool::Impl::_workerThreadBody(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&);mongo::ThreadPool::Impl::_consumeTasks();mongo::ThreadPool::Impl::_doOneTask(std::unique_lock<std::mutex>*);mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorFixed::start()::{lambda(mongo::Status)#2}>(mongo::transport::ServiceExecutorFixed::start()::{lambda(mongo::Status)#2}&&)::SpecificImpl::call(mongo::Status&&);mongo::transport::AsioReactor::run();asio::io_context::run();asio::detail::scheduler::run(std::error_code&);asio::detail::scheduler::do_run_one(asio::detail::conditionally_enabled_mutex::scoped_lock&, asio::detail::scheduler_thread_info&, std::error_code const&);epoll_wait;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_epoll_wait;do_epoll_wait;ep_poll;schedule_hrtimeout_range;schedule_hrtimeout_range_clock;schedule;finish_task_switch.isra.0 57120754
abortEx.actions;__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 59999778
Backgro.kSource;[unknown];__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 60059742
Timesta.Monitor;__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 79996210
FlowCon.fresher;__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 79997889
WTIdleS.Sweeper;__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 80000423
clientcursormon;[unknown];std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::~_State_impl();[unknown];execute_native_thread_routine;std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run();mongo::BackgroundJob::jobBody();mongo::(anonymous namespace)::ClientCursorMonitor::run();__clock_nanosleep;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_clock_nanosleep;common_nsleep;hrtimer_nanosleep;do_nanosleep;schedule;finish_task_switch.isra.0 80001108
ftdc;__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 86787129
JournalFlusher;__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 87447692
mongod;__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 89004632
DeadlineMonitor;__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 89004830
TicketH.Monitor;__GI___futex_abstimed_wait_cancelable64;-;entry_SYSCALL_64_after_hwframe;do_syscall_64;x64_sys_call;__x64_sys_futex;do_futex;futex_wait;futex_wait_queue;schedule;finish_task_switch.isra.0 89088267
